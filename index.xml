<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>熊仔家族</title>
    <link>http://qq516249940.github.io/</link>
    <description>A Clean, Elegant but Advanced Hugo Theme for Hugo.</description>
    <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 20 Mar 2023 14:42:24 &#43;0800</lastBuildDate>
      <atom:link href="http://qq516249940.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
  <title>Js中的export,default作用</title>
  <link>http://qq516249940.github.io/posts/vue/js%E4%B8%AD%E7%9A%84exportdefault%E4%BD%9C%E7%94%A8/</link>
  <pubDate>Mon, 20 Mar 2023 14:42:24 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/vue/js%E4%B8%AD%E7%9A%84exportdefault%E4%BD%9C%E7%94%A8/</guid>
  <description><![CDATA[export default语句 在JavaScript中，export default语句用于将模块中的一个值作为默认导出。默认导出是模块中的主要导出，它通常是模块中的一个函数、类或对象。当其他文件导入模块时，它们可以使用import语句来获取默认导出，并将其分配给任何名称。
以下是一个示例，展示了如何使用export default语句导出一个函数：
1 2 3 4 5 6 7 // math.mjs const add = (a, b) =&gt; a + b; const subtract = (a, b) =&gt; a - b; export default function multiply(a, b) { return a * b; } 在这个示例中，我们首先定义了两个函数add和subtract。然后，我们使用export default语句将multiply函数作为默认导出。这意味着其他文件可以使用以下语法导入multiply函数：
1 2 3 4 // other.mjs import multiply from &#39;./math.mjs&#39;; console.log(multiply(2, 3)); // 输出 6 在这个示例中，我们使用import语句将multiply函数导入到另一个文件中。我们使用multiply函数计算2和3的乘积，并将结果打印到控制台中。
需要注意的是，每个模块只能有一个默认导出。如果您需要导出多个值，可以使用命名导出语法，例如export const。
linux 如何运行js文件 如果要在linux 命令行访问，需要创建一个文件
1 2 3 4 // 在 package.]]></description>
</item>
<item>
  <title>Main.js文件配置</title>
  <link>http://qq516249940.github.io/posts/vue/main.js%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</link>
  <pubDate>Mon, 20 Mar 2023 11:29:43 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/vue/main.js%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</guid>
  <description><![CDATA[在 Vue 3 中，src/main.js 文件是应用程序的主要入口点。在这个文件中，你需要进行一些基本的配置，例如导入 Vue 库、创建 Vue 实例、挂载 Vue 实例等。
以下是一个示例 src/main.js 文件的基本配置：
1 2 3 4 5 6 import { createApp } from &#39;vue&#39;; import App from &#39;./App.vue&#39;; const app = createApp(App); app.mount(&#39;#app&#39;); 在这个示例中，我们首先导入了 createApp 函数和 App 组件，然后使用 createApp 函数创建了一个 Vue 实例，并将 App 组件作为根组件传递给它。最后，我们使用 mount 方法将 Vue 实例挂载到 HTML 元素上。
你还可以在 createApp 函数中进行其他配置，例如添加插件、定义全局组件、定义全局指令等。例如，以下是一个示例 src/main.js 文件，其中我们添加了 vue-router 插件和一个全局组件：
1 2 3 4 5 6 7 8 9 10 11 import { createApp } from &#39;vue&#39;; import App from &#39;.]]></description>
</item>
<item>
  <title>量价和涨跌关系</title>
  <link>http://qq516249940.github.io/posts/%E5%A4%A7%E4%BD%9C%E6%89%8B/%E9%87%8F%E4%BB%B7%E5%92%8C%E6%B6%A8%E8%B7%8C%E5%85%B3%E7%B3%BB/</link>
  <pubDate>Sun, 19 Mar 2023 15:29:54 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/%E5%A4%A7%E4%BD%9C%E6%89%8B/%E9%87%8F%E4%BB%B7%E5%92%8C%E6%B6%A8%E8%B7%8C%E5%85%B3%E7%B3%BB/</guid>
  <description><![CDATA[價漲量漲，買入信號： 成交量持續增加，股價趨勢也轉為上升，這是短中線最佳的買入信號。「價漲量漲」是最常見的多頭主動進攻模式，應積極進場買入與主力共舞。
價漲量縮，繼續持有： 成交量減少，股價仍在繼續上升，適宜繼續持股，即使籌碼被完全鎖定，也只能是小資金短線參與，因為股價已經有了相當的漲幅，接近上漲末期了。有時在上漲初期也會出現「價漲量縮」，但可能是曇花一現，經過補量後仍有上漲空間。
價跌量增，棄賣觀望： 股價經過長期大幅下跌之後，出現成交量增加，即使股價仍在下跌，也要慎重對待極度恐慌的「多殺多」情況產生。所以，此階段的操作原則是放棄賣出、空倉觀望。低價區的量增說明有資金接手，說明後期有望形成底部或反彈的產生，可以適時關注。有時若在趨勢逆轉跌勢的初期出現價跌量增，那麼更應果斷地清倉出局。
價跌量縮，賣出信號： 成交量繼續減少，股價趨勢開始轉為下降，為賣出信號。此為無量下跌，底部遙遙無期。所謂「多頭不死、跌勢不止」，一直跌到多頭徹底喪失信心認賠殺出，爆出大的成交量時，跌勢才會停止。所以，在操作上，只要趨勢逆轉，應及時停損出場。
價平量增，轉多信號： 股價經過持續下跌來到低檔區，出現成交量增加、股價回穩現象，此時，一般成交量的陽線明顯多於陰線，凸凹量差比較明顯，說明底部在積聚上漲動力，有主力在進貨為中線轉陽信號，可以適量買進持股待漲。有時也會在上升趨勢中途出現「價平量增」，則說明股價上漲暫時受挫，只要上升趨勢未破，一般整理後仍會有行情。
價平量縮，警戒信號： 成交量顯著減少，股價經過長期大幅上漲之後，進行橫向整理不再上漲，此為警戒出貨的信號。此階段如果突發巨量拉出大陽或大陰線，無論有無利好利空消息，均應果斷出場。]]></description>
</item>
<item>
  <title>运维管理中的流程</title>
  <link>http://qq516249940.github.io/posts/devops/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E6%B5%81%E7%A8%8B/</link>
  <pubDate>Fri, 17 Mar 2023 15:40:43 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/devops/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E6%B5%81%E7%A8%8B/</guid>
  <description><![CDATA[运维管理中的流程通常包括以下几个方面： 故障管理流程：当系统出现故障时，需要有明确的故障处理流程，包括故障报告、故障诊断、故障修复、故障恢复等环节。
变更管理流程：当需要对系统进行变更时，需要有明确的变更管理流程，包括变更申请、变更评估、变更批准、变更实施、变更验证等环节。
安全管理流程：当需要对系统进行安全管理时，需要有明确的安全管理流程，包括安全检查、漏洞修复、安全加固等环节。
日常运维流程：运维人员需要按照日常运维流程进行工作，包括系统监控、性能优化、备份恢复、容量规划等环节。
服务管理流程：当需要提供服务时，需要有明确的服务管理流程，包括服务需求分析、服务计划、服务实施、服务监控等环节。
资源管理流程：管理和优化资源的使用，包括硬件资源、软件资源、人力资源等。
以上流程是运维管理中比较常见的流程，通过建立流程可以规范运维工作的流程，提高工作效率和质量。
服务管理流程 以下是一个简单的服务管理流程实施计划：
服务需求分析：收集和分析用户对服务的需求，包括用户需求、业务需求等，以便制定服务计划和实施方案。
服务计划：制定服务计划，包括服务目标、服务内容、服务标准、服务时间等，以便明确服务的范围和要求。
服务实施：按照服务计划进行服务实施，包括服务开发、服务测试、服务部署等环节，以确保服务能够按照计划顺利实施。
服务监控：对服务进行监控和评估，包括服务质量、服务效果、服务反馈等，以便及时发现问题并进行改进。
服务改进：根据监控结果和用户反馈，对服务进行改进和优化，以提高服务质量和用户满意度。
服务维护：对服务进行维护和更新，包括服务升级、服务维护、服务备份等，以确保服务的稳定性和可靠性。
总之，服务管理流程需要根据具体情况进行制定和实施，以确保服务能够按照计划顺利实施，并且能够不断优化和改进。
资源管理流程 以下是一个简单的资源管理流程实施方案：
硬件资源管理：对硬件资源进行管理，包括服务器、网络设备、存储设备等，需要制定硬件采购计划、硬件配置管理、硬件维护保养等流程，以确保硬件资源的稳定和可靠性。
软件资源管理：对软件资源进行管理，包括操作系统、数据库、应用程序等，需要制定软件采购计划、软件配置管理、软件升级维护等流程，以确保软件资源的稳定和安全性。
人力资源管理：对人力资源进行管理，包括招聘、培训、考核等，需要制定人力资源管理计划、人员配置管理、人员绩效考核等流程，以确保团队的稳定和发展。
财务资源管理：对财务资源进行管理，包括预算管理、成本控制、费用核算等，需要制定财务管理计划、费用审批管理、财务报表分析等流程，以确保资源的合理利用和成本控制。
容量规划：对资源容量进行规划和管理，包括硬件容量、软件容量、网络容量等，需要制定容量规划计划、容量监控管理、容量扩展预测等流程，以确保资源能够满足业务需求。
总之，资源管理流程需要根据具体情况进行制定和实施，以确保资源能够得到有效的管理和利用，同时也需要不断优化和改进，以适应业务的发展和变化。]]></description>
</item>
<item>
  <title>运维工程师如何量化工作</title>
  <link>http://qq516249940.github.io/posts/devops/%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%A6%82%E4%BD%95%E9%87%8F%E5%8C%96%E5%B7%A5%E4%BD%9C/</link>
  <pubDate>Thu, 16 Mar 2023 14:36:38 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/devops/%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%A6%82%E4%BD%95%E9%87%8F%E5%8C%96%E5%B7%A5%E4%BD%9C/</guid>
  <description><![CDATA[运维工程师可以通过以下方式来量化工作：
服务器数量：记录服务器的数量和类型，以便了解团队所管理的服务器规模。
故障处理时间：记录故障处理的时间，以便了解团队的故障处理效率。
系统可用性：记录系统的可用性和稳定性，以便了解团队所管理的系统的稳定性情况。
安全漏洞修复：记录安全漏洞修复的数量和时间，以便了解团队的安全工作情况。
自动化程度：记录自动化程度的提高情况，例如自动化脚本的编写和使用情况，以便了解团队的自动化程度。
成本控制：记录成本控制情况，例如服务器和软件的采购成本，以便了解团队的成本控制情况。
用户满意度：记录用户满意度和反馈，以便了解团队的服务质量和用户体验。
总之，量化工作可以帮助运维工程师更好地了解工作进展和成果，并为团队的工作提供有力的支持。
还有稳定性量化体系、成本量化体系、效率量化体系]]></description>
</item>
<item>
  <title>运维团队如何写周报</title>
  <link>http://qq516249940.github.io/posts/devops/%E8%BF%90%E7%BB%B4%E5%9B%A2%E9%98%9F%E5%A6%82%E4%BD%95%E5%86%99%E5%91%A8%E6%8A%A5/</link>
  <pubDate>Thu, 16 Mar 2023 14:26:18 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/devops/%E8%BF%90%E7%BB%B4%E5%9B%A2%E9%98%9F%E5%A6%82%E4%BD%95%E5%86%99%E5%91%A8%E6%8A%A5/</guid>
  <description><![CDATA[运维团队写周报的目的是为了向管理层和同事汇报上周的工作进展和成果，以及下周的计划和目标。以下是一些编写周报的建议：
确定周报的格式和内容：周报的格式可以根据团队的需要进行调整，但通常包括工作进展、问题和解决方案、下周计划和目标等内容。
每日记录工作内容：每天记录工作内容和进展，以便在写周报时能够更准确地反映工作进展和成果。
突出重点：在写周报时，应重点突出上周的重要工作和成果，以及下周的重点计划和目标。
量化工作成果：在写周报时，应尽量量化工作成果，例如服务器的数量、故障处理时间等，以便更好地展示工作的效果。
避免使用专业术语：周报是向管理层和同事汇报工作进展的一种方式，因此应尽量避免使用过多的专业术语，以便让读者更容易理解。
定期发送周报：周报应该在每周的固定时间发送，以便管理层和同事能够及时了解团队的工作进展和成果。 总之，写周报是一个重要的沟通工具，可以帮助运维团队更好地与其他团队成员进行沟通和协作。]]></description>
</item>
<item>
  <title>腾讯云JSON格式的权限策略</title>
  <link>http://qq516249940.github.io/posts/%E4%BA%91/%E8%85%BE%E8%AE%AF%E4%BA%91json%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%9D%83%E9%99%90%E7%AD%96%E7%95%A5/</link>
  <pubDate>Thu, 16 Mar 2023 14:05:41 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/%E4%BA%91/%E8%85%BE%E8%AE%AF%E4%BA%91json%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%9D%83%E9%99%90%E7%AD%96%E7%95%A5/</guid>
  <description><![CDATA[单个或多个资源定义 授予单个或多个资源权限时可采用下述的六段式描述方式，每种产品都拥有其各自的资源和对应的资源定义详情。 六段式定义方式如下所示：
1 qcs:project_id:service_type:region:account:resource 资源六段式包含以下六个字段，详细含义及示例如下：
字段名称 含义及取值 是否必填 示例 qcs qcloud service 的简称，表示是腾讯云的云资源。 是 qcs project_id 描述项目信息，仅兼容 CAM 早期逻辑，当前策略语法禁止填写该信息，置空即可。 否 置空 service_type 描述产品简称，详细可查看 支持 CAM 的产品 中的 “CAM 中简称”。值为空时表示所有产品。 否 云服务器为 cvm内容分发网络为 cdn region 描述地域信息，地域命名方式请参考 地域列表；值为空的时候表示所有地域。 否 华北地区(北京)为 ap-beijing华南地区(广州)为 ap-guangzhou account 描述资源拥有者的主账号信息，目前支持两种方式描述资源拥有者，uin 和 uid 方式。uin 方式，即主账号的账户ID，表示为uin/${uin}。uid 方式，即主账号的 APPID，表示为uid/${appid}，仅 COS 和 CAS 业务的资源拥有者使用该方式描述。值为空的时候表示创建策略的 CAM 用户所属的主账号。 否 uin 如：uin/12345678uid 如：uid/10001234 resource 描述各产品的具体资源详情，目前支持两种方式描述资源信息，resource_type/${resourceid} 和 &lt;resource_type&gt;/&lt;resource_path&gt;。resource_type/${resourceid}：resourcetype 为资源前缀，描述资源类型，详细可查看 支持 CAM 的业务接口 中产品的资源六段式；${resourceid} 为具体的资源 ID，可前往各个产品控制台查看，值为 * 时代表该类型资源的所有资源。&lt;resource_type&gt;/&lt;resource_path&gt;：resourcetype 为资源前缀，描述资源类型；&lt;resource_path&gt; 为资源路径，该方式下，支持目录级的前缀匹配。详细可查看 支持 CAM 的业务接口 中产品的资源六段式。 是 云服务器：instance/ins-1云数据库 MySQL：instanceId/cdb-1对象存储 COS：prefix//10001234/bucket1/* 表示 bucket1 下的所有文件。COS 资源（resource）支持多种类型，详情请参见 COS 授权策略使用指引 禁止访问消息队列角色管理-指定环境 策略语法：]]></description>
</item>
<item>
  <title>Devops如何从0到1</title>
  <link>http://qq516249940.github.io/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/</link>
  <pubDate>Wed, 15 Mar 2023 10:31:59 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/</guid>
  <description><![CDATA[要从0到1实施DevOps，可以按照以下步骤进行： 确定目标和需求： 首先，需要明确为什么要实施DevOps，以及实施DevOps的目标和需求是什么。例如，是否需要提高软件交付速度和质量，是否需要更快地响应客户需求，是否需要降低运维成本等等。根据这些需求，可以确定实施DevOps的重点和方向。
培训团队： DevOps需要涉及多个团队和角色，包括开发、测试、运维等。因此，需要对团队进行培训，让他们了解DevOps的基本理念、流程和工具。
选择工具和技术： 根据实际需求和团队技术水平，选择适合的工具和技术来支持DevOps实施。例如，选择版本控制工具、持续集成工具、自动化部署工具、监控工具等等。
设计流程和规范： 根据实际需求和选定的工具和技术，设计DevOps流程和规范，包括代码管理、构建和测试、部署和运维、监控和日志等方面。这些流程和规范应该能够满足实际需求，并且符合最佳实践。
实施和测试： 在实施DevOps之前，需要进行充分的测试和验证。可以先在一个小规模的项目或团队中进行试点，验证流程和工具的可行性和有效性。在试点成功后，可以逐步扩大范围，将DevOps应用到更多的项目和团队中。
持续改进： DevOps是一个持续改进的过程，需要不断地优化流程和工具，提高效率和质量。因此，在实施DevOps后，需要定期评估和改进DevOps流程和规范，以适应不断变化的需求和技术。
devops devsecops bizdevops区别 DevOps、DevSecOps和BizDevOps都是软件开发和运维领域的术语，它们的区别如下：
DevOps：DevOps是一种软件开发和运维方法论，旨在通过自动化软件开发、测试、部署和运维过程，提高软件交付的速度、质量和可靠性。DevOps强调开发和运维之间的协作和沟通，以实现快速、可靠的软件交付。
DevSecOps：DevSecOps是在DevOps的基础上加入了安全性的概念，旨在将安全性作为整个软件开发和运维过程的一部分，从而提高软件系统的安全性和可靠性。DevSecOps强调开发、运维和安全团队之间的协作和沟通，以实现安全、可靠的软件交付。
BizDevOps：BizDevOps是在DevOps的基础上加入了业务的概念，旨在将业务需求作为整个软件开发和运维过程的一部分，从而提高软件系统的价值和业务影响力。BizDevOps强调开发、运维和业务团队之间的协作和沟通，以实现业务价值的最大化。
总之，DevOps、DevSecOps和BizDevOps都是为了提高软件开发和运维效率和质量，但它们的重点不同。DevOps强调开发和运维之间的协作和沟通，DevSecOps强调安全性，BizDevOps强调业务价值。
devops规范 以下是一些DevOps规范的建议：
版本控制规范： 使用版本控制工具（如Git）来管理代码和配置文件，并遵循一些最佳实践，例如分支管理、提交信息规范、代码审查等等。
持续集成规范： 使用持续集成工具（如Jenkins）自动构建和测试代码，并遵循一些最佳实践，例如构建脚本规范、测试覆盖率要求、构建结果通知等等。
自动化部署规范： 使用自动化部署工具（如Ansible、Puppet、Chef）自动部署代码和配置文件到目标环境，并遵循一些最佳实践，例如部署流程规范、回滚策略、环境变量管理等等。
监控和日志规范： 使用监控工具（如Nagios、Zabbix）监控应用程序和基础设施的运行状况，并使用日志管理工具（如ELK、Graylog）收集和分析日志，并遵循一些最佳实践，例如监控指标定义、告警策略、日志格式规范等等。
容器化和编排规范： 使用容器化技术（如Docker）将应用程序和依赖项打包为容器，并使用编排工具（如Kubernetes、Docker Compose）管理容器的部署和扩展，并遵循一些最佳实践，例如容器镜像管理、容器网络和存储管理、容器资源限制等等。
持续交付和部署规范： 使用持续交付工具（如Jenkins Pipeline、GitLab CI/CD）自动化整个软件交付过程，包括构建、测试、部署和验证，并遵循一些最佳实践，例如交付流程规范、交付版本管理、交付验证策略等等。
以上是一些DevOps规范的建议，具体的规范应该根据实际需求和团队技术水平来确定，并且应该不断地优化和改进
软件版本管理办法 软件版本管理是指对软件开发过程中所涉及到的各个版本进行管理和控制的一种方法。以下是一些常见的软件版本管理办法：
版本号命名规范：制定版本号命名规范，如主版本号、次版本号、修订版本号等，以便于识别和管理不同版本。
版本库管理：使用版本控制系统（VCS）管理代码库，如 Git、SVN 等，以便于追踪和管理代码的变更历史。
分支管理：使用分支管理策略，如主分支、开发分支、发布分支等，以便于管理不同阶段的代码版本和发布版本。
版本发布流程：制定版本发布流程，如测试、审核、发布等，以便于确保发布版本的质量和稳定性。
版本文档管理：对每个版本的文档进行管理，如用户手册、API 文档等，以便于开发者和用户了解版本的功能和使用方法。
版本回退管理：制定版本回退策略，如备份、恢复、回滚等，以便于在出现问题时快速回退到之前的版本。
通过以上的软件版本管理办法，可以有效地管理和控制软件开发过程中所涉及到的各个版本，提高开发效率和软件质量。]]></description>
</item>
<item>
  <title>Hugo如何使用mermaid绘图</title>
  <link>http://qq516249940.github.io/posts/golang/hugo%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8mermaid%E7%BB%98%E5%9B%BE/</link>
  <pubDate>Tue, 14 Mar 2023 14:53:01 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/golang/hugo%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8mermaid%E7%BB%98%E5%9B%BE/</guid>
  <description><![CDATA[ 出入口流量图 ]]></description>
</item>
<item>
  <title>什么是IPsec</title>
  <link>http://qq516249940.github.io/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/</link>
  <pubDate>Tue, 14 Mar 2023 14:50:08 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/</guid>
  <description><![CDATA[什么是IPsec VPN? VPN（Virtual Private Network，虚拟专用网）是一种在公用网络上建立专用网络的技术。它之所以称之为虚拟网，主要是因为VPN的两个节点之间并没有像传统专用网那样使用端到端的物理链路，而是架构在公用网络如Internet之上的逻辑网络，用户数据通过逻辑链路传输。
按照VPN协议分，常见的VPN种类有：IPsec、SSL、GRE、PPTP和L2TP等。其中IPsec是通用性较强的一种VPN技术，适用于多种网络互访的场景。
IPsec VPN是指采用IPsec实现远程接入的一种VPN技术，通过在公网上为两个或多个私有网络之间建立IPsec隧道，并通过加密和验证算法保证VPN连接的安全。
IPsec VPN保护的是点对点之间的通信，通过IPsec VPN可以在主机和主机之间、主机和网络安全网关之间或网络安全网关（如路由器、防火墙）之间建立安全的隧道连接。其协议主要工作在IP层，在IP层对数据包进行加密和验证。
相对于其他VPN技术，IPsec VPN安全性更高，数据在IPsec隧道中都是加密传输，但相应的IPsec VPN在配置和组网部署上更复杂。
IPsec是如何工作的？ IPsec的工作原理大致可以分为4个阶段： 识别“感兴趣流”。网络设备接收到报文后，通常会将报文的五元组等信息和IPsec策略进行匹配来判断报文是否要通过IPsec隧道传输，需要通过IPsec隧道传输的流量通常被称为“感兴趣流”。 协商安全联盟（Security Association，以下简称SA）。SA是通信双方对某些协商要素的约定，比如双方使用的安全协议、数据传输采用的封装模式、协议采用的加密和验证算法、用于数据传输的密钥等，通信双方之间只有建立了SA，才能进行安全的数据传输。 识别出感兴趣流后，本端网络设备会向对端网络设备发起SA协商。在这一阶段，通信双方之间通过IKE协议先协商建立IKE SA（用于身份验证和密钥信息交换），然后在IKE SA的基础上协商建立IPsec SA（用于数据安全传输）。
数据传输。IPsec SA建立成功后，双方就可以通过IPsec隧道传输数据了。 IPsec为了保证数据传输的安全性，在这一阶段需要通过AH或ESP协议对数据进行加密和验证。加密机制保证了数据的机密性，防止数据在传输过程中被窃取；验证机制保证了数据的真实可靠，防止数据在传输过程中被仿冒和篡改。
隧道拆除。通常情况下，通信双方之间的会话老化（连接断开）即代表通信双方数据交换已经完成，因此为了节省系统资源，通信双方之间的隧道在空闲时间达到一定值后会自动删除。
如图所示，IPsec发送方会使用加密算法和加密密钥对报文进行加密，即将原始数据“乔装打扮”封装起来。然后发送方和接收方分别通过相同的验证算法和验证密钥对加密后的报文进行处理得到完整性校验值ICV。如果两端计算的ICV相同则表示该报文在传输过程中没有被篡改，接收方对验证通过的报文进行解密处理；如果ICV不相同则直接丢弃报文。 IPsec的3个重要协议- IKE/AH/ESP IKE（Internet Key Exchange，因特网密钥交换） IKE协议是一种基于UDP的应用层协议，它主要用于SA协商和密钥管理。
IKE协议分IKEv1和IKEv2两个版本，IKEv2与IKEv1相比，修复了多处公认的密码学方面的安全漏洞，提高了安全性能，同时简化了安全联盟的协商过程，提高了协商效率。
IKE协议属于一种混合型协议，它综合了ISAKMP（Internet Security Association and Key Management Protocol）、Oakley协议和SKEME协议这三个协议。其中，ISAKMP定义了IKE SA的建立过程，Oakley和SKEME协议的核心是DH（Diffie-Hellman）算法，主要用于在Internet上安全地分发密钥、验证身份，以保证数据传输的安全性。IKE SA和IPSec SA需要的加密密钥和验证密钥都是通过DH算法生成的，它还支持密钥动态刷新。
AH（Authentication Header，认证头） AH协议用来对IP报文进行数据源认证和完整性校验，即用来保证传输的IP报文的来源可信和数据不被篡改，但它并不提供加密功能。AH协议在每个数据包的标准IP报文头后面添加一个AH报文头，AH协议对报文的完整性校验的范围是整个IP报文。
ESP（Encapsulating Security Payload，封装安全载荷） ESP协议除了对IP报文进行数据源认证和完整性校验以外，还能对数据进行加密。ESP协议在每一个数据包的标准IP报头后方添加一个ESP报文头，并在数据包后方追加一个ESP尾（ESP Trailer和ESP Auth data）。ESP协议在传输模式下的数据完整性校验范围不包括IP头，因此它不能保证IP报文头不被篡改。
AH和ESP可以单独使用，也可以同时使用。AH和ESP同时使用时，报文会先进行ESP封装，再进行AH封装；IPsec解封装时，先进行AH解封装，再进行ESP解封装。
IPsec使用的端口 IPsec中IKE协议采用UDP 500端口发起和响应协商，因此为了使IKE协商报文顺利通过网关设备，通常要在网关设备上配置安全策略放开UDP 500端口。另外，在IPsec NAT穿越场景下，还需要放开UDP 4500端口。
而AH和ESP属于网络层协议，不涉及端口。为了使IPsec隧道能正常建立，通常还要在网关设备上配置安全策略放开AH（IP协议号是51）和ESP（IP协议号是50）服务。
IPsec VPN和SSL VPN对比 IPsec和SSL是部署VPN时最常用的两种技术，它们都有加密和验证机制保证用户远程接入的安全性。从以下几个方面对IPsec VPN和SSL VPN进行对比：
OSI参考模型工作层级 OSI定义了网络互连的七层框架：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。IPsec工作在网络层，它直接运行在IP（Internet Protocol，互联网协议）之上。而SSL工作在应用层，是一种应用层协议，它加密的是HTTP流量，而不是直接加密IP数据包。]]></description>
</item>
</channel>
</rss>
