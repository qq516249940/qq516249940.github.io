<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>熊仔家族</title>
    <link>http://qq516249940.github.io/</link>
    <description>A Clean, Elegant but Advanced Hugo Theme for Hugo.</description>
    <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 18 Apr 2023 10:38:00 &#43;0800</lastBuildDate>
      <atom:link href="http://qq516249940.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
  <title>运维告警p1,p2,P3,P4代表什么</title>
  <link>http://qq516249940.github.io/posts/devops/%E8%BF%90%E7%BB%B4%E5%91%8A%E8%AD%A6p1p2p3p4%E4%BB%A3%E8%A1%A8%E4%BB%80%E4%B9%88/</link>
  <pubDate>Tue, 18 Apr 2023 10:38:00 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/devops/%E8%BF%90%E7%BB%B4%E5%91%8A%E8%AD%A6p1p2p3p4%E4%BB%A3%E8%A1%A8%E4%BB%80%E4%B9%88/</guid>
  <description><![CDATA[P1、P2、P3、P4 是一种常见的告警级别分类，通常用于指示告警的优先级和紧急程度。以下是这些级别通常所代表的意义：
P1（严重）：指出现了系统崩溃、关键功能异常或其他严重问题。此时需要立即采取行动，以避免系统出现大规模故障。
P2（高）：指出现了重要功能异常或其他需要紧急处理的问题。虽然不是系统崩溃，但它会影响业务运作，并且需要迅速解决。
P3（中）：指出现了较小的问题，可能会造成某些业务的中断，但并不影响整个系统的运行。
P4（低）：指类似日志记录错误、非关键性的功能异常等问题。它们不会影响业务运行，但是需要记录以供后续分析。
这些告警级别的使用可以帮助运维人员更好地管理和处理发生的问题，优先处理最严重的问题，提高系统的可靠性和稳定性。同时，对于不同级别的告警，可以设置不同的处理策略和时间目标，以最大化服务水平的维护。]]></description>
</item>
<item>
  <title>Lftp使用ssh密钥连接sftp</title>
  <link>http://qq516249940.github.io/posts/linux/lftp%E4%BD%BF%E7%94%A8ssh%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5sftp/</link>
  <pubDate>Sat, 15 Apr 2023 14:42:05 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/linux/lftp%E4%BD%BF%E7%94%A8ssh%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5sftp/</guid>
  <description><![CDATA[sftp.rsa是ssh的私钥
1 lftp -u root, sftp://120.77.xxx.xxx -p 1022 -e &#39;set sftp:connect-program &#34;ssh -a -x -i ~/docker-compose/sftp.rsa&#34;&#39; ]]></description>
</item>
<item>
  <title>提测模板</title>
  <link>http://qq516249940.github.io/posts/devops/%E6%8F%90%E6%B5%8B%E6%A8%A1%E6%9D%BF/</link>
  <pubDate>Thu, 13 Apr 2023 11:42:24 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/devops/%E6%8F%90%E6%B5%8B%E6%A8%A1%E6%9D%BF/</guid>
  <description><![CDATA[ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 提测内容： 1.每日更新xxxx新增部​分xxxx场景 updatxxxxInterest 2.正常xxxx信息同步job新增部分xxxx场景 updatexxxxStatus 涉及服务： xxxx-backend 代码分支： xxxxx-backend - hotfix-4.1.2-0412 影响范围： xxxjob xxxjob sql脚本及配置：无 ]]></description>
</item>
<item>
  <title>编写一个简单的agent监控文件变化</title>
  <link>http://qq516249940.github.io/posts/devops/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84agent%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6%E5%8F%98%E5%8C%96/</link>
  <pubDate>Tue, 04 Apr 2023 17:27:07 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/devops/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84agent%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6%E5%8F%98%E5%8C%96/</guid>
  <description><![CDATA[本次需求是获取.appjvm文件，监控到有文件变化就发送数据到后端接口,agent是守护进程模式。有两个字段，一个是hostname,一个是文本的内容content。经过后端api解析获取数据
agent脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 import os import time import requests import socket import logging from watchdog.]]></description>
</item>
<item>
  <title>Vue路由剖析</title>
  <link>http://qq516249940.github.io/posts/vue/vue%E8%B7%AF%E7%94%B1%E5%89%96%E6%9E%90/</link>
  <pubDate>Fri, 24 Mar 2023 15:16:02 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/vue/vue%E8%B7%AF%E7%94%B1%E5%89%96%E6%9E%90/</guid>
  <description><![CDATA[Vue是一个流行的JavaScript框架，用于构建单页面应用程序（SPA）。Vue Router是Vue.js官方的路由管理器，它允许您通过URL路径映射到组件，并在应用程序中进行导航。
Vue Router的核心是路由映射，它将URL路径映射到组件。路由映射是一个JavaScript对象，其中每个键都是URL路径，每个值都是要呈现的组件。例如，以下路由映射将路径&quot;/home&quot;映射到名为&quot;Home&quot;的组件：
1 2 3 const routes = { &#39;/home&#39;: Home } Vue Router使用HTML5 History API或哈希模式来管理浏览器历史记录。在HTML5 History模式下，Vue Router使用pushState和replaceState方法来添加和修改浏览器历史记录。在哈希模式下，Vue Router使用URL的哈希部分来模拟历史记录。
要使用Vue Router，您需要将其添加为Vue.js应用程序的插件。在创建Vue实例之前，您需要先安装Vue Router并将其传递给Vue构造函数：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import Vue from &#39;vue&#39; import VueRouter from &#39;vue-router&#39; import Home from &#39;./components/Home.vue&#39; Vue.use(VueRouter) const routes = { &#39;/home&#39;: Home } const router = new VueRouter({ routes }) const app = new Vue({ router }).]]></description>
</item>
<item>
  <title>Pulsar创建租户、命名空间、topic命令</title>
  <link>http://qq516249940.github.io/posts/linux/pulsar%E5%88%9B%E5%BB%BA%E7%A7%9F%E6%88%B7%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4topic%E5%91%BD%E4%BB%A4/</link>
  <pubDate>Thu, 23 Mar 2023 16:39:01 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/linux/pulsar%E5%88%9B%E5%BB%BA%E7%A7%9F%E6%88%B7%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4topic%E5%91%BD%E4%BB%A4/</guid>
  <description><![CDATA[在Apache Pulsar中，可以使用以下命令来创建租户、命名空间和topic：
创建租户 1 bin/pulsar-admin tenants create &lt;tenant-name&gt; --admin-roles &lt;admin-roles&gt; 其中，&lt;tenant-name&gt;是新租户的名称，&lt;admin-roles&gt;是可以管理该租户的角色列表。
创建命名空间： 1 bin/pulsar-admin namespaces create &lt;tenant-name&gt;/&lt;namespace-name&gt; 其中，&lt;tenant-name&gt;是新命名空间所属的租户名称，&lt;namespace-name&gt;是新命名空间的名称。
创建topic： 1 bin/pulsar-admin topics create &lt;tenant-name&gt;/&lt;namespace-name&gt;/&lt;topic-name&gt; 其中，&lt;tenant-name&gt;和&lt;namespace-name&gt;是新topic所属的租户和命名空间名称，&lt;topic-name&gt;是新topic的名称。
请注意，创建租户和命名空间需要具有管理员权限的身份验证令牌。如果你没有这个令牌，你需要先获取它。此外，创建topic需要具有对应租户和命名空间的写入权限。]]></description>
</item>
<item>
  <title>Pod生命周期</title>
  <link>http://qq516249940.github.io/posts/k8s/pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
  <pubDate>Tue, 21 Mar 2023 16:34:30 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/k8s/pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
  <description><![CDATA[Pod 生命周期 在整个生命周期中，Pod 会出现 5 种阶段（Phase）。 Pending：Pod 被 K8s 创建出来后，起始于 Pending 阶段。在 Pending 阶段，Pod 将经过调度，被分配至目标节点开始拉取镜像、加载依赖项、创建容器。
Running：当 Pod 所有容器都已被创建，且至少一个容器已经在运行中，Pod 将进入 Running 阶段。
Succeeded：当 Pod 中的所有容器都执行完成后终止，并且不会再重启，Pod 将进入 Succeeded 阶段。
Failed：若 Pod 中的所有容器都已终止，并且至少有一个容器是因为失败终止，也就是说容器以非 0 状态异常退出或被系统终止，Pod 将进入 Failed 阶段。
Unkonwn：因为某些原因无法取得 Pod 状态，这种情况 Pod 将被置为 Unkonwn 状态。
一般来说，对于 Job 类型的负载，Pod 在成功执行完任务之后将会以 Succeeded 状态为终态。而对于 Deployment 等负载，一般期望 Pod 能够持续提供服务，直到 Pod 因删除消失，或者因异常退出/被系统终止而进入 Failed 阶段。 Pod 的 5 个阶段是 Pod 在其生命周期中所处位置的简单宏观概述，并不是对容器或 Pod 状态的综合汇总。Pod 有一些细分状态（ PodConditions ），例如 Ready/NotReady、Initialized、 PodScheduled/Unschedulable 等。这些细分状态描述造成 Pod 所处阶段的具体成因是什么。比如，Pod 当前阶段是 Pending，对应的细分状态是 Unschedulable，这就意味着 Pod 调度出现了问题。 容器也有其生命周期状态（State）：Waiting、Running 和 Terminated。并且也有其对应的状态原因（Reason），例如 ContainerCreating、Error、OOMKilled、CrashLoopBackOff、Completed 等。而对于发生过重启或终止的容器，上一个状态（LastState）字段不仅包含状态原因，还包含上一次退出的状态码（Exit Code）。例如容器上一次退出状态码是 137，状态原因是 OOMKilled，说明容器是因为 OOM 被系统强行终止。在异常诊断过程中，容器的退出状态是至关重要的信息。 除了必要的集群和应用监控，一般还需要通过 kubectl 命令搜集异常状态信息。]]></description>
</item>
<item>
  <title>试用期工作学习计划及试用期考核标准</title>
  <link>http://qq516249940.github.io/posts/devops/%E8%AF%95%E7%94%A8%E6%9C%9F%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%8F%8A%E8%AF%95%E7%94%A8%E6%9C%9F%E8%80%83%E6%A0%B8%E6%A0%87%E5%87%86/</link>
  <pubDate>Tue, 21 Mar 2023 11:54:36 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/devops/%E8%AF%95%E7%94%A8%E6%9C%9F%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%8F%8A%E8%AF%95%E7%94%A8%E6%9C%9F%E8%80%83%E6%A0%B8%E6%A0%87%E5%87%86/</guid>
  <description><![CDATA[试用期工作学习计划及试用期考核标准可以分为三个阶段，每个阶段为一个月。以下是一个可能的计划和考核标准：
第一阶段（第一个月）： 学习公司的基本业务和流程。 熟悉公司的产品和服务。 了解公司的文化和价值观。 完成公司分配的任务和项目。 考核标准：
能够熟练使用公司的基本工具和软件。 能够理解公司的业务和流程。 能够按时完成公司分配的任务和项目。
第二阶段（第二个月）： 深入学习公司的业务和流程。 掌握公司的产品和服务。 参与公司的项目并提出建设性意见。 学习并掌握公司的工作方法和流程。 考核标准：
能够独立完成公司分配的任务和项目。 能够提出建设性意见，并为公司的项目做出贡献。 能够熟练使用公司的工具和软件。
第三阶段（第三个月）： 参与公司的重要项目。 学习并掌握公司的管理方法和流程。 掌握并运用公司的核心技能。 为公司的发展提出建设性意见。 考核标准：
能够独立完成公司的重要项目。 能够为公司的发展提出建设性意见。 能够掌握并运用公司的核心技能。 能够理解并运用公司的管理方法和流程。 以上是一个可能的试用期工作学习计划及试用期考核标准，具体的计划和标准可以根据公司的实际情况进行调整。]]></description>
</item>
<item>
  <title>Js中的export,default作用</title>
  <link>http://qq516249940.github.io/posts/vue/js%E4%B8%AD%E7%9A%84exportdefault%E4%BD%9C%E7%94%A8/</link>
  <pubDate>Mon, 20 Mar 2023 14:42:24 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/vue/js%E4%B8%AD%E7%9A%84exportdefault%E4%BD%9C%E7%94%A8/</guid>
  <description><![CDATA[export default语句 在JavaScript中，export default语句用于将模块中的一个值作为默认导出。默认导出是模块中的主要导出，它通常是模块中的一个函数、类或对象。当其他文件导入模块时，它们可以使用import语句来获取默认导出，并将其分配给任何名称。
以下是一个示例，展示了如何使用export default语句导出一个函数：
1 2 3 4 5 6 7 // math.mjs const add = (a, b) =&gt; a + b; const subtract = (a, b) =&gt; a - b; export default function multiply(a, b) { return a * b; } 在这个示例中，我们首先定义了两个函数add和subtract。然后，我们使用export default语句将multiply函数作为默认导出。这意味着其他文件可以使用以下语法导入multiply函数：
1 2 3 4 // other.mjs import multiply from &#39;./math.mjs&#39;; console.log(multiply(2, 3)); // 输出 6 在这个示例中，我们使用import语句将multiply函数导入到另一个文件中。我们使用multiply函数计算2和3的乘积，并将结果打印到控制台中。
需要注意的是，每个模块只能有一个默认导出。如果您需要导出多个值，可以使用命名导出语法，例如export const。
linux 如何运行js文件 如果要在linux 命令行访问，需要创建一个文件
1 2 3 4 // 在 package.]]></description>
</item>
<item>
  <title>Main.js文件配置</title>
  <link>http://qq516249940.github.io/posts/vue/main.js%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</link>
  <pubDate>Mon, 20 Mar 2023 11:29:43 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/vue/main.js%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</guid>
  <description><![CDATA[在 Vue 3 中，src/main.js 文件是应用程序的主要入口点。在这个文件中，你需要进行一些基本的配置，例如导入 Vue 库、创建 Vue 实例、挂载 Vue 实例等。
以下是一个示例 src/main.js 文件的基本配置：
1 2 3 4 5 6 import { createApp } from &#39;vue&#39;; import App from &#39;./App.vue&#39;; const app = createApp(App); app.mount(&#39;#app&#39;); 在这个示例中，我们首先导入了 createApp 函数和 App 组件，然后使用 createApp 函数创建了一个 Vue 实例，并将 App 组件作为根组件传递给它。最后，我们使用 mount 方法将 Vue 实例挂载到 HTML 元素上。
你还可以在 createApp 函数中进行其他配置，例如添加插件、定义全局组件、定义全局指令等。例如，以下是一个示例 src/main.js 文件，其中我们添加了 vue-router 插件和一个全局组件：
1 2 3 4 5 6 7 8 9 10 11 import { createApp } from &#39;vue&#39;; import App from &#39;.]]></description>
</item>
</channel>
</rss>
