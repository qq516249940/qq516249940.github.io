<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>熊仔家族</title>
    <link>http://qq516249940.github.io/</link>
    <description>A Clean, Elegant but Advanced Hugo Theme for Hugo.</description>
    <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 23 Mar 2023 16:39:01 &#43;0800</lastBuildDate>
      <atom:link href="http://qq516249940.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
  <title>Pulsar创建租户、命名空间、topic命令</title>
  <link>http://qq516249940.github.io/posts/linux/pulsar%E5%88%9B%E5%BB%BA%E7%A7%9F%E6%88%B7%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4topic%E5%91%BD%E4%BB%A4/</link>
  <pubDate>Thu, 23 Mar 2023 16:39:01 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/linux/pulsar%E5%88%9B%E5%BB%BA%E7%A7%9F%E6%88%B7%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4topic%E5%91%BD%E4%BB%A4/</guid>
  <description><![CDATA[在Apache Pulsar中，可以使用以下命令来创建租户、命名空间和topic：
创建租户 1 bin/pulsar-admin tenants create &lt;tenant-name&gt; --admin-roles &lt;admin-roles&gt; 其中，&lt;tenant-name&gt;是新租户的名称，&lt;admin-roles&gt;是可以管理该租户的角色列表。
创建命名空间： 1 bin/pulsar-admin namespaces create &lt;tenant-name&gt;/&lt;namespace-name&gt; 其中，&lt;tenant-name&gt;是新命名空间所属的租户名称，&lt;namespace-name&gt;是新命名空间的名称。
创建topic： 1 bin/pulsar-admin topics create &lt;tenant-name&gt;/&lt;namespace-name&gt;/&lt;topic-name&gt; 其中，&lt;tenant-name&gt;和&lt;namespace-name&gt;是新topic所属的租户和命名空间名称，&lt;topic-name&gt;是新topic的名称。
请注意，创建租户和命名空间需要具有管理员权限的身份验证令牌。如果你没有这个令牌，你需要先获取它。此外，创建topic需要具有对应租户和命名空间的写入权限。]]></description>
</item>
<item>
  <title>Pod生命周期</title>
  <link>http://qq516249940.github.io/posts/k8s/pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
  <pubDate>Tue, 21 Mar 2023 16:34:30 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/k8s/pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
  <description><![CDATA[Pod 生命周期 在整个生命周期中，Pod 会出现 5 种阶段（Phase）。 Pending：Pod 被 K8s 创建出来后，起始于 Pending 阶段。在 Pending 阶段，Pod 将经过调度，被分配至目标节点开始拉取镜像、加载依赖项、创建容器。
Running：当 Pod 所有容器都已被创建，且至少一个容器已经在运行中，Pod 将进入 Running 阶段。
Succeeded：当 Pod 中的所有容器都执行完成后终止，并且不会再重启，Pod 将进入 Succeeded 阶段。
Failed：若 Pod 中的所有容器都已终止，并且至少有一个容器是因为失败终止，也就是说容器以非 0 状态异常退出或被系统终止，Pod 将进入 Failed 阶段。
Unkonwn：因为某些原因无法取得 Pod 状态，这种情况 Pod 将被置为 Unkonwn 状态。
一般来说，对于 Job 类型的负载，Pod 在成功执行完任务之后将会以 Succeeded 状态为终态。而对于 Deployment 等负载，一般期望 Pod 能够持续提供服务，直到 Pod 因删除消失，或者因异常退出/被系统终止而进入 Failed 阶段。 Pod 的 5 个阶段是 Pod 在其生命周期中所处位置的简单宏观概述，并不是对容器或 Pod 状态的综合汇总。Pod 有一些细分状态（ PodConditions ），例如 Ready/NotReady、Initialized、 PodScheduled/Unschedulable 等。这些细分状态描述造成 Pod 所处阶段的具体成因是什么。比如，Pod 当前阶段是 Pending，对应的细分状态是 Unschedulable，这就意味着 Pod 调度出现了问题。 容器也有其生命周期状态（State）：Waiting、Running 和 Terminated。并且也有其对应的状态原因（Reason），例如 ContainerCreating、Error、OOMKilled、CrashLoopBackOff、Completed 等。而对于发生过重启或终止的容器，上一个状态（LastState）字段不仅包含状态原因，还包含上一次退出的状态码（Exit Code）。例如容器上一次退出状态码是 137，状态原因是 OOMKilled，说明容器是因为 OOM 被系统强行终止。在异常诊断过程中，容器的退出状态是至关重要的信息。 除了必要的集群和应用监控，一般还需要通过 kubectl 命令搜集异常状态信息。]]></description>
</item>
<item>
  <title>试用期工作学习计划及试用期考核标准</title>
  <link>http://qq516249940.github.io/posts/devops/%E8%AF%95%E7%94%A8%E6%9C%9F%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%8F%8A%E8%AF%95%E7%94%A8%E6%9C%9F%E8%80%83%E6%A0%B8%E6%A0%87%E5%87%86/</link>
  <pubDate>Tue, 21 Mar 2023 11:54:36 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/devops/%E8%AF%95%E7%94%A8%E6%9C%9F%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%8F%8A%E8%AF%95%E7%94%A8%E6%9C%9F%E8%80%83%E6%A0%B8%E6%A0%87%E5%87%86/</guid>
  <description><![CDATA[试用期工作学习计划及试用期考核标准可以分为三个阶段，每个阶段为一个月。以下是一个可能的计划和考核标准：
第一阶段（第一个月）： 学习公司的基本业务和流程。 熟悉公司的产品和服务。 了解公司的文化和价值观。 完成公司分配的任务和项目。 考核标准：
能够熟练使用公司的基本工具和软件。 能够理解公司的业务和流程。 能够按时完成公司分配的任务和项目。
第二阶段（第二个月）： 深入学习公司的业务和流程。 掌握公司的产品和服务。 参与公司的项目并提出建设性意见。 学习并掌握公司的工作方法和流程。 考核标准：
能够独立完成公司分配的任务和项目。 能够提出建设性意见，并为公司的项目做出贡献。 能够熟练使用公司的工具和软件。
第三阶段（第三个月）： 参与公司的重要项目。 学习并掌握公司的管理方法和流程。 掌握并运用公司的核心技能。 为公司的发展提出建设性意见。 考核标准：
能够独立完成公司的重要项目。 能够为公司的发展提出建设性意见。 能够掌握并运用公司的核心技能。 能够理解并运用公司的管理方法和流程。 以上是一个可能的试用期工作学习计划及试用期考核标准，具体的计划和标准可以根据公司的实际情况进行调整。]]></description>
</item>
<item>
  <title>Js中的export,default作用</title>
  <link>http://qq516249940.github.io/posts/vue/js%E4%B8%AD%E7%9A%84exportdefault%E4%BD%9C%E7%94%A8/</link>
  <pubDate>Mon, 20 Mar 2023 14:42:24 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/vue/js%E4%B8%AD%E7%9A%84exportdefault%E4%BD%9C%E7%94%A8/</guid>
  <description><![CDATA[export default语句 在JavaScript中，export default语句用于将模块中的一个值作为默认导出。默认导出是模块中的主要导出，它通常是模块中的一个函数、类或对象。当其他文件导入模块时，它们可以使用import语句来获取默认导出，并将其分配给任何名称。
以下是一个示例，展示了如何使用export default语句导出一个函数：
1 2 3 4 5 6 7 // math.mjs const add = (a, b) =&gt; a + b; const subtract = (a, b) =&gt; a - b; export default function multiply(a, b) { return a * b; } 在这个示例中，我们首先定义了两个函数add和subtract。然后，我们使用export default语句将multiply函数作为默认导出。这意味着其他文件可以使用以下语法导入multiply函数：
1 2 3 4 // other.mjs import multiply from &#39;./math.mjs&#39;; console.log(multiply(2, 3)); // 输出 6 在这个示例中，我们使用import语句将multiply函数导入到另一个文件中。我们使用multiply函数计算2和3的乘积，并将结果打印到控制台中。
需要注意的是，每个模块只能有一个默认导出。如果您需要导出多个值，可以使用命名导出语法，例如export const。
linux 如何运行js文件 如果要在linux 命令行访问，需要创建一个文件
1 2 3 4 // 在 package.]]></description>
</item>
<item>
  <title>Main.js文件配置</title>
  <link>http://qq516249940.github.io/posts/vue/main.js%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</link>
  <pubDate>Mon, 20 Mar 2023 11:29:43 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/vue/main.js%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</guid>
  <description><![CDATA[在 Vue 3 中，src/main.js 文件是应用程序的主要入口点。在这个文件中，你需要进行一些基本的配置，例如导入 Vue 库、创建 Vue 实例、挂载 Vue 实例等。
以下是一个示例 src/main.js 文件的基本配置：
1 2 3 4 5 6 import { createApp } from &#39;vue&#39;; import App from &#39;./App.vue&#39;; const app = createApp(App); app.mount(&#39;#app&#39;); 在这个示例中，我们首先导入了 createApp 函数和 App 组件，然后使用 createApp 函数创建了一个 Vue 实例，并将 App 组件作为根组件传递给它。最后，我们使用 mount 方法将 Vue 实例挂载到 HTML 元素上。
你还可以在 createApp 函数中进行其他配置，例如添加插件、定义全局组件、定义全局指令等。例如，以下是一个示例 src/main.js 文件，其中我们添加了 vue-router 插件和一个全局组件：
1 2 3 4 5 6 7 8 9 10 11 import { createApp } from &#39;vue&#39;; import App from &#39;.]]></description>
</item>
<item>
  <title>量价和涨跌关系</title>
  <link>http://qq516249940.github.io/posts/%E5%A4%A7%E4%BD%9C%E6%89%8B/%E9%87%8F%E4%BB%B7%E5%92%8C%E6%B6%A8%E8%B7%8C%E5%85%B3%E7%B3%BB/</link>
  <pubDate>Sun, 19 Mar 2023 15:29:54 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/%E5%A4%A7%E4%BD%9C%E6%89%8B/%E9%87%8F%E4%BB%B7%E5%92%8C%E6%B6%A8%E8%B7%8C%E5%85%B3%E7%B3%BB/</guid>
  <description><![CDATA[價漲量漲，買入信號： 成交量持續增加，股價趨勢也轉為上升，這是短中線最佳的買入信號。「價漲量漲」是最常見的多頭主動進攻模式，應積極進場買入與主力共舞。
價漲量縮，繼續持有： 成交量減少，股價仍在繼續上升，適宜繼續持股，即使籌碼被完全鎖定，也只能是小資金短線參與，因為股價已經有了相當的漲幅，接近上漲末期了。有時在上漲初期也會出現「價漲量縮」，但可能是曇花一現，經過補量後仍有上漲空間。
價跌量增，棄賣觀望： 股價經過長期大幅下跌之後，出現成交量增加，即使股價仍在下跌，也要慎重對待極度恐慌的「多殺多」情況產生。所以，此階段的操作原則是放棄賣出、空倉觀望。低價區的量增說明有資金接手，說明後期有望形成底部或反彈的產生，可以適時關注。有時若在趨勢逆轉跌勢的初期出現價跌量增，那麼更應果斷地清倉出局。
價跌量縮，賣出信號： 成交量繼續減少，股價趨勢開始轉為下降，為賣出信號。此為無量下跌，底部遙遙無期。所謂「多頭不死、跌勢不止」，一直跌到多頭徹底喪失信心認賠殺出，爆出大的成交量時，跌勢才會停止。所以，在操作上，只要趨勢逆轉，應及時停損出場。
價平量增，轉多信號： 股價經過持續下跌來到低檔區，出現成交量增加、股價回穩現象，此時，一般成交量的陽線明顯多於陰線，凸凹量差比較明顯，說明底部在積聚上漲動力，有主力在進貨為中線轉陽信號，可以適量買進持股待漲。有時也會在上升趨勢中途出現「價平量增」，則說明股價上漲暫時受挫，只要上升趨勢未破，一般整理後仍會有行情。
價平量縮，警戒信號： 成交量顯著減少，股價經過長期大幅上漲之後，進行橫向整理不再上漲，此為警戒出貨的信號。此階段如果突發巨量拉出大陽或大陰線，無論有無利好利空消息，均應果斷出場。]]></description>
</item>
<item>
  <title>运维管理中的流程</title>
  <link>http://qq516249940.github.io/posts/devops/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E6%B5%81%E7%A8%8B/</link>
  <pubDate>Fri, 17 Mar 2023 15:40:43 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/devops/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E6%B5%81%E7%A8%8B/</guid>
  <description><![CDATA[运维管理中的流程通常包括以下几个方面： 故障管理流程：当系统出现故障时，需要有明确的故障处理流程，包括故障报告、故障诊断、故障修复、故障恢复等环节。
变更管理流程：当需要对系统进行变更时，需要有明确的变更管理流程，包括变更申请、变更评估、变更批准、变更实施、变更验证等环节。
安全管理流程：当需要对系统进行安全管理时，需要有明确的安全管理流程，包括安全检查、漏洞修复、安全加固等环节。
日常运维流程：运维人员需要按照日常运维流程进行工作，包括系统监控、性能优化、备份恢复、容量规划等环节。
服务管理流程：当需要提供服务时，需要有明确的服务管理流程，包括服务需求分析、服务计划、服务实施、服务监控等环节。
资源管理流程：管理和优化资源的使用，包括硬件资源、软件资源、人力资源等。
以上流程是运维管理中比较常见的流程，通过建立流程可以规范运维工作的流程，提高工作效率和质量。
服务管理流程 以下是一个简单的服务管理流程实施计划：
服务需求分析：收集和分析用户对服务的需求，包括用户需求、业务需求等，以便制定服务计划和实施方案。
服务计划：制定服务计划，包括服务目标、服务内容、服务标准、服务时间等，以便明确服务的范围和要求。
服务实施：按照服务计划进行服务实施，包括服务开发、服务测试、服务部署等环节，以确保服务能够按照计划顺利实施。
服务监控：对服务进行监控和评估，包括服务质量、服务效果、服务反馈等，以便及时发现问题并进行改进。
服务改进：根据监控结果和用户反馈，对服务进行改进和优化，以提高服务质量和用户满意度。
服务维护：对服务进行维护和更新，包括服务升级、服务维护、服务备份等，以确保服务的稳定性和可靠性。
总之，服务管理流程需要根据具体情况进行制定和实施，以确保服务能够按照计划顺利实施，并且能够不断优化和改进。
资源管理流程 以下是一个简单的资源管理流程实施方案：
硬件资源管理：对硬件资源进行管理，包括服务器、网络设备、存储设备等，需要制定硬件采购计划、硬件配置管理、硬件维护保养等流程，以确保硬件资源的稳定和可靠性。
软件资源管理：对软件资源进行管理，包括操作系统、数据库、应用程序等，需要制定软件采购计划、软件配置管理、软件升级维护等流程，以确保软件资源的稳定和安全性。
人力资源管理：对人力资源进行管理，包括招聘、培训、考核等，需要制定人力资源管理计划、人员配置管理、人员绩效考核等流程，以确保团队的稳定和发展。
财务资源管理：对财务资源进行管理，包括预算管理、成本控制、费用核算等，需要制定财务管理计划、费用审批管理、财务报表分析等流程，以确保资源的合理利用和成本控制。
容量规划：对资源容量进行规划和管理，包括硬件容量、软件容量、网络容量等，需要制定容量规划计划、容量监控管理、容量扩展预测等流程，以确保资源能够满足业务需求。
总之，资源管理流程需要根据具体情况进行制定和实施，以确保资源能够得到有效的管理和利用，同时也需要不断优化和改进，以适应业务的发展和变化。]]></description>
</item>
<item>
  <title>运维工程师如何量化工作</title>
  <link>http://qq516249940.github.io/posts/devops/%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%A6%82%E4%BD%95%E9%87%8F%E5%8C%96%E5%B7%A5%E4%BD%9C/</link>
  <pubDate>Thu, 16 Mar 2023 14:36:38 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/devops/%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%A6%82%E4%BD%95%E9%87%8F%E5%8C%96%E5%B7%A5%E4%BD%9C/</guid>
  <description><![CDATA[运维工程师可以通过以下方式来量化工作：
服务器数量：记录服务器的数量和类型，以便了解团队所管理的服务器规模。
故障处理时间：记录故障处理的时间，以便了解团队的故障处理效率。
系统可用性：记录系统的可用性和稳定性，以便了解团队所管理的系统的稳定性情况。
安全漏洞修复：记录安全漏洞修复的数量和时间，以便了解团队的安全工作情况。
自动化程度：记录自动化程度的提高情况，例如自动化脚本的编写和使用情况，以便了解团队的自动化程度。
成本控制：记录成本控制情况，例如服务器和软件的采购成本，以便了解团队的成本控制情况。
用户满意度：记录用户满意度和反馈，以便了解团队的服务质量和用户体验。
总之，量化工作可以帮助运维工程师更好地了解工作进展和成果，并为团队的工作提供有力的支持。
还有稳定性量化体系、成本量化体系、效率量化体系]]></description>
</item>
<item>
  <title>运维团队如何写周报</title>
  <link>http://qq516249940.github.io/posts/devops/%E8%BF%90%E7%BB%B4%E5%9B%A2%E9%98%9F%E5%A6%82%E4%BD%95%E5%86%99%E5%91%A8%E6%8A%A5/</link>
  <pubDate>Thu, 16 Mar 2023 14:26:18 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/devops/%E8%BF%90%E7%BB%B4%E5%9B%A2%E9%98%9F%E5%A6%82%E4%BD%95%E5%86%99%E5%91%A8%E6%8A%A5/</guid>
  <description><![CDATA[运维团队写周报的目的是为了向管理层和同事汇报上周的工作进展和成果，以及下周的计划和目标。以下是一些编写周报的建议：
确定周报的格式和内容：周报的格式可以根据团队的需要进行调整，但通常包括工作进展、问题和解决方案、下周计划和目标等内容。
每日记录工作内容：每天记录工作内容和进展，以便在写周报时能够更准确地反映工作进展和成果。
突出重点：在写周报时，应重点突出上周的重要工作和成果，以及下周的重点计划和目标。
量化工作成果：在写周报时，应尽量量化工作成果，例如服务器的数量、故障处理时间等，以便更好地展示工作的效果。
避免使用专业术语：周报是向管理层和同事汇报工作进展的一种方式，因此应尽量避免使用过多的专业术语，以便让读者更容易理解。
定期发送周报：周报应该在每周的固定时间发送，以便管理层和同事能够及时了解团队的工作进展和成果。 总之，写周报是一个重要的沟通工具，可以帮助运维团队更好地与其他团队成员进行沟通和协作。]]></description>
</item>
<item>
  <title>腾讯云JSON格式的权限策略</title>
  <link>http://qq516249940.github.io/posts/%E4%BA%91/%E8%85%BE%E8%AE%AF%E4%BA%91json%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%9D%83%E9%99%90%E7%AD%96%E7%95%A5/</link>
  <pubDate>Thu, 16 Mar 2023 14:05:41 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/%E4%BA%91/%E8%85%BE%E8%AE%AF%E4%BA%91json%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%9D%83%E9%99%90%E7%AD%96%E7%95%A5/</guid>
  <description><![CDATA[单个或多个资源定义 授予单个或多个资源权限时可采用下述的六段式描述方式，每种产品都拥有其各自的资源和对应的资源定义详情。 六段式定义方式如下所示：
1 qcs:project_id:service_type:region:account:resource 资源六段式包含以下六个字段，详细含义及示例如下：
字段名称 含义及取值 是否必填 示例 qcs qcloud service 的简称，表示是腾讯云的云资源。 是 qcs project_id 描述项目信息，仅兼容 CAM 早期逻辑，当前策略语法禁止填写该信息，置空即可。 否 置空 service_type 描述产品简称，详细可查看 支持 CAM 的产品 中的 “CAM 中简称”。值为空时表示所有产品。 否 云服务器为 cvm内容分发网络为 cdn region 描述地域信息，地域命名方式请参考 地域列表；值为空的时候表示所有地域。 否 华北地区(北京)为 ap-beijing华南地区(广州)为 ap-guangzhou account 描述资源拥有者的主账号信息，目前支持两种方式描述资源拥有者，uin 和 uid 方式。uin 方式，即主账号的账户ID，表示为uin/${uin}。uid 方式，即主账号的 APPID，表示为uid/${appid}，仅 COS 和 CAS 业务的资源拥有者使用该方式描述。值为空的时候表示创建策略的 CAM 用户所属的主账号。 否 uin 如：uin/12345678uid 如：uid/10001234 resource 描述各产品的具体资源详情，目前支持两种方式描述资源信息，resource_type/${resourceid} 和 &lt;resource_type&gt;/&lt;resource_path&gt;。resource_type/${resourceid}：resourcetype 为资源前缀，描述资源类型，详细可查看 支持 CAM 的业务接口 中产品的资源六段式；${resourceid} 为具体的资源 ID，可前往各个产品控制台查看，值为 * 时代表该类型资源的所有资源。&lt;resource_type&gt;/&lt;resource_path&gt;：resourcetype 为资源前缀，描述资源类型；&lt;resource_path&gt; 为资源路径，该方式下，支持目录级的前缀匹配。详细可查看 支持 CAM 的业务接口 中产品的资源六段式。 是 云服务器：instance/ins-1云数据库 MySQL：instanceId/cdb-1对象存储 COS：prefix//10001234/bucket1/* 表示 bucket1 下的所有文件。COS 资源（resource）支持多种类型，详情请参见 COS 授权策略使用指引 禁止访问消息队列角色管理-指定环境 策略语法：]]></description>
</item>
</channel>
</rss>
