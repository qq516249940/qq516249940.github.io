<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>vue - Category - 熊仔家族</title>
    <link>http://qq516249940.github.io/categories/vue/</link>
    <description>vue - Category - 熊仔家族</description>
    <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 24 Mar 2023 15:16:02 &#43;0800</lastBuildDate><atom:link href="http://qq516249940.github.io/categories/vue/" rel="self" type="application/rss+xml" /><item>
  <title>Vue路由剖析</title>
  <link>http://qq516249940.github.io/posts/vue/vue%E8%B7%AF%E7%94%B1%E5%89%96%E6%9E%90/</link>
  <pubDate>Fri, 24 Mar 2023 15:16:02 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/vue/vue%E8%B7%AF%E7%94%B1%E5%89%96%E6%9E%90/</guid>
  <description><![CDATA[Vue是一个流行的JavaScript框架，用于构建单页面应用程序（SPA）。Vue Router是Vue.js官方的路由管理器，它允许您通过URL路径映射到组件，并在应用程序中进行导航。
Vue Router的核心是路由映射，它将URL路径映射到组件。路由映射是一个JavaScript对象，其中每个键都是URL路径，每个值都是要呈现的组件。例如，以下路由映射将路径&quot;/home&quot;映射到名为&quot;Home&quot;的组件：
1 2 3 const routes = { &#39;/home&#39;: Home } Vue Router使用HTML5 History API或哈希模式来管理浏览器历史记录。在HTML5 History模式下，Vue Router使用pushState和replaceState方法来添加和修改浏览器历史记录。在哈希模式下，Vue Router使用URL的哈希部分来模拟历史记录。
要使用Vue Router，您需要将其添加为Vue.js应用程序的插件。在创建Vue实例之前，您需要先安装Vue Router并将其传递给Vue构造函数：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import Vue from &#39;vue&#39; import VueRouter from &#39;vue-router&#39; import Home from &#39;./components/Home.vue&#39; Vue.use(VueRouter) const routes = { &#39;/home&#39;: Home } const router = new VueRouter({ routes }) const app = new Vue({ router }).]]></description>
</item>
<item>
  <title>Js中的export,default作用</title>
  <link>http://qq516249940.github.io/posts/vue/js%E4%B8%AD%E7%9A%84exportdefault%E4%BD%9C%E7%94%A8/</link>
  <pubDate>Mon, 20 Mar 2023 14:42:24 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/vue/js%E4%B8%AD%E7%9A%84exportdefault%E4%BD%9C%E7%94%A8/</guid>
  <description><![CDATA[export default语句 在JavaScript中，export default语句用于将模块中的一个值作为默认导出。默认导出是模块中的主要导出，它通常是模块中的一个函数、类或对象。当其他文件导入模块时，它们可以使用import语句来获取默认导出，并将其分配给任何名称。
以下是一个示例，展示了如何使用export default语句导出一个函数：
1 2 3 4 5 6 7 // math.mjs const add = (a, b) =&gt; a + b; const subtract = (a, b) =&gt; a - b; export default function multiply(a, b) { return a * b; } 在这个示例中，我们首先定义了两个函数add和subtract。然后，我们使用export default语句将multiply函数作为默认导出。这意味着其他文件可以使用以下语法导入multiply函数：
1 2 3 4 // other.mjs import multiply from &#39;./math.mjs&#39;; console.log(multiply(2, 3)); // 输出 6 在这个示例中，我们使用import语句将multiply函数导入到另一个文件中。我们使用multiply函数计算2和3的乘积，并将结果打印到控制台中。
需要注意的是，每个模块只能有一个默认导出。如果您需要导出多个值，可以使用命名导出语法，例如export const。
linux 如何运行js文件 如果要在linux 命令行访问，需要创建一个文件
1 2 3 4 // 在 package.]]></description>
</item>
<item>
  <title>Main.js文件配置</title>
  <link>http://qq516249940.github.io/posts/vue/main.js%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</link>
  <pubDate>Mon, 20 Mar 2023 11:29:43 &#43;0800</pubDate>
  <author>Author</author>
  <guid>http://qq516249940.github.io/posts/vue/main.js%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</guid>
  <description><![CDATA[在 Vue 3 中，src/main.js 文件是应用程序的主要入口点。在这个文件中，你需要进行一些基本的配置，例如导入 Vue 库、创建 Vue 实例、挂载 Vue 实例等。
以下是一个示例 src/main.js 文件的基本配置：
1 2 3 4 5 6 import { createApp } from &#39;vue&#39;; import App from &#39;./App.vue&#39;; const app = createApp(App); app.mount(&#39;#app&#39;); 在这个示例中，我们首先导入了 createApp 函数和 App 组件，然后使用 createApp 函数创建了一个 Vue 实例，并将 App 组件作为根组件传递给它。最后，我们使用 mount 方法将 Vue 实例挂载到 HTML 元素上。
你还可以在 createApp 函数中进行其他配置，例如添加插件、定义全局组件、定义全局指令等。例如，以下是一个示例 src/main.js 文件，其中我们添加了 vue-router 插件和一个全局组件：
1 2 3 4 5 6 7 8 9 10 11 import { createApp } from &#39;vue&#39;; import App from &#39;.]]></description>
</item>
</channel>
</rss>
