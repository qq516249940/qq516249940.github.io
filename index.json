[{"categories":["devops"],"content":"P1、P2、P3、P4 是一种常见的告警级别分类，通常用于指示告警的优先级和紧急程度。以下是这些级别通常所代表的意义： P1（严重）：指出现了系统崩溃、关键功能异常或其他严重问题。此时需要立即采取行动，以避免系统出现大规模故障。 P2（高）：指出现了重要功能异常或其他需要紧急处理的问题。虽然不是系统崩溃，但它会影响业务运作，并且需要迅速解决。 P3（中）：指出现了较小的问题，可能会造成某些业务的中断，但并不影响整个系统的运行。 P4（低）：指类似日志记录错误、非关键性的功能异常等问题。它们不会影响业务运行，但是需要记录以供后续分析。 这些告警级别的使用可以帮助运维人员更好地管理和处理发生的问题，优先处理最严重的问题，提高系统的可靠性和稳定性。同时，对于不同级别的告警，可以设置不同的处理策略和时间目标，以最大化服务水平的维护。 ","date":"2023-04-18","objectID":"/posts/devops/%E8%BF%90%E7%BB%B4%E5%91%8A%E8%AD%A6p1p2p3p4%E4%BB%A3%E8%A1%A8%E4%BB%80%E4%B9%88/:0:0","tags":["devops"],"title":"运维告警p1,p2,P3,P4代表什么","uri":"/posts/devops/%E8%BF%90%E7%BB%B4%E5%91%8A%E8%AD%A6p1p2p3p4%E4%BB%A3%E8%A1%A8%E4%BB%80%E4%B9%88/"},{"categories":["linux"],"content":"sftp.rsa是ssh的私钥 lftp -u root, sftp://120.77.xxx.xxx -p 1022 -e 'set sftp:connect-program \"ssh -a -x -i ~/docker-compose/sftp.rsa\"' ","date":"2023-04-15","objectID":"/posts/linux/lftp%E4%BD%BF%E7%94%A8ssh%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5sftp/:0:0","tags":["linux"],"title":"Lftp使用ssh密钥连接sftp","uri":"/posts/linux/lftp%E4%BD%BF%E7%94%A8ssh%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5sftp/"},{"categories":["devops"],"content":" 提测内容： 1.每日更新xxxx新增部​分xxxx场景 updatxxxxInterest 2.正常xxxx信息同步job新增部分xxxx场景 updatexxxxStatus 涉及服务： xxxx-backend 代码分支： xxxxx-backend - hotfix-4.1.2-0412 影响范围： xxxjob xxxjob sql脚本及配置：无 ","date":"2023-04-13","objectID":"/posts/devops/%E6%8F%90%E6%B5%8B%E6%A8%A1%E6%9D%BF/:0:0","tags":["devops"],"title":"提测模板","uri":"/posts/devops/%E6%8F%90%E6%B5%8B%E6%A8%A1%E6%9D%BF/"},{"categories":["devops"],"content":"本次需求是获取.appjvm文件，监控到有文件变化就发送数据到后端接口,agent是守护进程模式。有两个字段，一个是hostname,一个是文本的内容content。经过后端api解析获取数据 ","date":"2023-04-04","objectID":"/posts/devops/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84agent%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6%E5%8F%98%E5%8C%96/:0:0","tags":["devops","python"],"title":"编写一个简单的agent监控文件变化","uri":"/posts/devops/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84agent%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6%E5%8F%98%E5%8C%96/"},{"categories":["devops"],"content":"agent脚本 import os import time import requests import socket import logging from watchdog.observers import Observer from watchdog.events import FileSystemEventHandler class FileModifiedHandler(FileSystemEventHandler): def __init__(self, callback): super().__init__() self.callback = callback def on_modified(self, event): if event.src_path == '/data/scripts/.appjvm': logging.info('文件内容发生变化') self.callback() def read_file(): with open('/data/scripts/.appjvm', 'r') as f: return f.read() def send_data(data): # 获取主机名 hostname = socket.gethostname() # 添加主机名到数据中 data['hostname'] = hostname # 发送数据到其他接口 response = requests.post('http://192.168.5.33:18080/api/', json=data) if response.status_code == 200: logging.info('数据发送成功') else: logging.error('数据发送失败') if __name__ == '__main__': # 配置日志记录器 logging.basicConfig(filename='/data/scripts/agent.log', level=logging.INFO, format='%(asctime)s %(levelname)s: %(message)s') # 创建子进程 pid = os.fork() if pid \u003e 0: # 父进程退出 logging.info('父进程退出') exit(0) # 创建新会话 os.setsid() # 切换工作目录 os.chdir('/data/scripts/') # 重设文件权限掩码 os.umask(0) # 关闭标准输入、输出、错误输出 # sys.stdout.flush() # sys.stderr.flush() # with open(os.devnull, 'w') as f: # os.dup2(f.fileno(), sys.stdin.fileno()) # os.dup2(f.fileno(), sys.stdout.fileno()) # os.dup2(f.fileno(), sys.stderr.fileno()) # 第一次发送数据 send_data({'content': read_file()}) # 创建 watchdog 观察器 event_handler = FileModifiedHandler(lambda: send_data({'content': read_file()})) observer = Observer() observer.schedule(event_handler, '/data/scripts/', recursive=False) observer.start() # 守护进程主循环 while True: time.sleep(60) ","date":"2023-04-04","objectID":"/posts/devops/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84agent%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6%E5%8F%98%E5%8C%96/:1:0","tags":["devops","python"],"title":"编写一个简单的agent监控文件变化","uri":"/posts/devops/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84agent%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6%E5%8F%98%E5%8C%96/"},{"categories":["devops"],"content":"后端接口 from fastapi import FastAPI from pydantic import BaseModel app = FastAPI() class Data(BaseModel): hostname: str content: str @app.post('/api') async def receive_data(data: Data): # 处理接收到的数据 print(data) print(f'收到来自 {data.hostname} 的数据：{data.content}') # 返回响应 return {'message': '数据已成功接收'} 如何运行后端 uvicorn main:app --reload --port 18080 --host 0.0.0.0 ","date":"2023-04-04","objectID":"/posts/devops/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84agent%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6%E5%8F%98%E5%8C%96/:2:0","tags":["devops","python"],"title":"编写一个简单的agent监控文件变化","uri":"/posts/devops/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84agent%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6%E5%8F%98%E5%8C%96/"},{"categories":["vue"],"content":" Vue是一个流行的JavaScript框架，用于构建单页面应用程序（SPA）。Vue Router是Vue.js官方的路由管理器，它允许您通过URL路径映射到组件，并在应用程序中进行导航。 Vue Router的核心是路由映射，它将URL路径映射到组件。路由映射是一个JavaScript对象，其中每个键都是URL路径，每个值都是要呈现的组件。例如，以下路由映射将路径\"/home\"映射到名为\"Home\"的组件： const routes = { '/home': Home } Vue Router使用HTML5 History API或哈希模式来管理浏览器历史记录。在HTML5 History模式下，Vue Router使用pushState和replaceState方法来添加和修改浏览器历史记录。在哈希模式下，Vue Router使用URL的哈希部分来模拟历史记录。 要使用Vue Router，您需要将其添加为Vue.js应用程序的插件。在创建Vue实例之前，您需要先安装Vue Router并将其传递给Vue构造函数： import Vue from 'vue' import VueRouter from 'vue-router' import Home from './components/Home.vue' Vue.use(VueRouter) const routes = { '/home': Home } const router = new VueRouter({ routes }) const app = new Vue({ router }).$mount('#app') 在上面的代码中，我们首先导入Vue和Vue Router。然后，我们定义一个名为\"Home\"的组件，并将其添加到路由映射中。接下来，我们创建一个VueRouter实例，并将路由映射传递给它。最后，我们创建一个Vue实例，并将VueRouter实例传递给它。 一旦Vue Router添加到应用程序中，就可以使用\u003crouter-link\u003e组件创建链接以导航到不同的路由。例如，以下代码将创建一个链接，该链接将导航到名为\"Home\"的路由： \u003crouter-link to=\"/home\"\u003eHome\u003c/router-link\u003e 要在组件中访问当前路由信息，您可以使用$route对象。例如，以下代码将在组件中显示当前路由路径： \u003ctemplate\u003e \u003cdiv\u003e Current route: {{ $route.path }} \u003c/div\u003e \u003c/template\u003e 这是Vue Router的简要介绍，它可以帮助您管理Vue.js应用程序中的路由。 ","date":"2023-03-24","objectID":"/posts/vue/vue%E8%B7%AF%E7%94%B1%E5%89%96%E6%9E%90/:0:0","tags":["vue"],"title":"Vue路由剖析","uri":"/posts/vue/vue%E8%B7%AF%E7%94%B1%E5%89%96%E6%9E%90/"},{"categories":["linux"],"content":"在Apache Pulsar中，可以使用以下命令来创建租户、命名空间和topic： ","date":"2023-03-23","objectID":"/posts/linux/pulsar%E5%88%9B%E5%BB%BA%E7%A7%9F%E6%88%B7%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4topic%E5%91%BD%E4%BB%A4/:0:0","tags":["linux"],"title":"Pulsar创建租户、命名空间、topic命令","uri":"/posts/linux/pulsar%E5%88%9B%E5%BB%BA%E7%A7%9F%E6%88%B7%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4topic%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"创建租户 bin/pulsar-admin tenants create \u003ctenant-name\u003e --admin-roles \u003cadmin-roles\u003e 其中，\u003ctenant-name\u003e是新租户的名称，\u003cadmin-roles\u003e是可以管理该租户的角色列表。 ","date":"2023-03-23","objectID":"/posts/linux/pulsar%E5%88%9B%E5%BB%BA%E7%A7%9F%E6%88%B7%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4topic%E5%91%BD%E4%BB%A4/:1:0","tags":["linux"],"title":"Pulsar创建租户、命名空间、topic命令","uri":"/posts/linux/pulsar%E5%88%9B%E5%BB%BA%E7%A7%9F%E6%88%B7%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4topic%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"创建命名空间： bin/pulsar-admin namespaces create \u003ctenant-name\u003e/\u003cnamespace-name\u003e 其中，\u003ctenant-name\u003e是新命名空间所属的租户名称，\u003cnamespace-name\u003e是新命名空间的名称。 ","date":"2023-03-23","objectID":"/posts/linux/pulsar%E5%88%9B%E5%BB%BA%E7%A7%9F%E6%88%B7%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4topic%E5%91%BD%E4%BB%A4/:2:0","tags":["linux"],"title":"Pulsar创建租户、命名空间、topic命令","uri":"/posts/linux/pulsar%E5%88%9B%E5%BB%BA%E7%A7%9F%E6%88%B7%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4topic%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"创建topic： bin/pulsar-admin topics create \u003ctenant-name\u003e/\u003cnamespace-name\u003e/\u003ctopic-name\u003e 其中，\u003ctenant-name\u003e和\u003cnamespace-name\u003e是新topic所属的租户和命名空间名称，\u003ctopic-name\u003e是新topic的名称。 请注意，创建租户和命名空间需要具有管理员权限的身份验证令牌。如果你没有这个令牌，你需要先获取它。此外，创建topic需要具有对应租户和命名空间的写入权限。 ","date":"2023-03-23","objectID":"/posts/linux/pulsar%E5%88%9B%E5%BB%BA%E7%A7%9F%E6%88%B7%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4topic%E5%91%BD%E4%BB%A4/:3:0","tags":["linux"],"title":"Pulsar创建租户、命名空间、topic命令","uri":"/posts/linux/pulsar%E5%88%9B%E5%BB%BA%E7%A7%9F%E6%88%B7%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4topic%E5%91%BD%E4%BB%A4/"},{"categories":["k8s"],"content":"Pod 生命周期 在整个生命周期中，Pod 会出现 5 种阶段（Phase）。 Pending：Pod 被 K8s 创建出来后，起始于 Pending 阶段。在 Pending 阶段，Pod 将经过调度，被分配至目标节点开始拉取镜像、加载依赖项、创建容器。 Running：当 Pod 所有容器都已被创建，且至少一个容器已经在运行中，Pod 将进入 Running 阶段。 Succeeded：当 Pod 中的所有容器都执行完成后终止，并且不会再重启，Pod 将进入 Succeeded 阶段。 Failed：若 Pod 中的所有容器都已终止，并且至少有一个容器是因为失败终止，也就是说容器以非 0 状态异常退出或被系统终止，Pod 将进入 Failed 阶段。 Unkonwn：因为某些原因无法取得 Pod 状态，这种情况 Pod 将被置为 Unkonwn 状态。 一般来说，对于 Job 类型的负载，Pod 在成功执行完任务之后将会以 Succeeded 状态为终态。而对于 Deployment 等负载，一般期望 Pod 能够持续提供服务，直到 Pod 因删除消失，或者因异常退出/被系统终止而进入 Failed 阶段。 Pod 的 5 个阶段是 Pod 在其生命周期中所处位置的简单宏观概述，并不是对容器或 Pod 状态的综合汇总。Pod 有一些细分状态（ PodConditions ），例如 Ready/NotReady、Initialized、 PodScheduled/Unschedulable 等。这些细分状态描述造成 Pod 所处阶段的具体成因是什么。比如，Pod 当前阶段是 Pending，对应的细分状态是 Unschedulable，这就意味着 Pod 调度出现了问题。 容器也有其生命周期状态（State）：Waiting、Running 和 Terminated。并且也有其对应的状态原因（Reason），例如 ContainerCreating、Error、OOMKilled、CrashLoopBackOff、Completed 等。而对于发生过重启或终止的容器，上一个状态（LastState）字段不仅包含状态原因，还包含上一次退出的状态码（Exit Code）。例如容器上一次退出状态码是 137，状态原因是 OOMKilled，说明容器是因为 OOM 被系统强行终止。在异常诊断过程中，容器的退出状态是至关重要的信息。 除了必要的集群和应用监控，一般还需要通过 kubectl 命令搜集异常状态信息。 // 获取Pod当前对象描述文件 kubectl get po \u003cpodName\u003e -n \u003cnamespace\u003e -o yaml // 获取Pod信息和事件（Events） kubectl describe pod \u003cpodName\u003e -n \u003cnamespace\u003e // 获取Pod容器日志 kubectl logs \u003cpodName\u003e \u003ccontainerName\u003e -n \u003cnamespace\u003e // 在容器中执行命令 kubectl exec \u003cpodName\u003e -n \u003cnamespace\u003e -c \u003ccontainerName\u003e -- \u003cCMD\u003e \u003cARGS\u003e ","date":"2023-03-21","objectID":"/posts/k8s/pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/:1:0","tags":["k8s"],"title":"Pod生命周期","uri":"/posts/k8s/pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"},{"categories":["k8s"],"content":"Pod 异常场景 下文将对这具体的 13 种场景进行描述和分析。 注意黄色框的内容。 参考： 解读 K8s Pod 的 13 种异常 ","date":"2023-03-21","objectID":"/posts/k8s/pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/:2:0","tags":["k8s"],"title":"Pod生命周期","uri":"/posts/k8s/pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"},{"categories":["devops"],"content":"试用期工作学习计划及试用期考核标准可以分为三个阶段，每个阶段为一个月。以下是一个可能的计划和考核标准： ","date":"2023-03-21","objectID":"/posts/devops/%E8%AF%95%E7%94%A8%E6%9C%9F%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%8F%8A%E8%AF%95%E7%94%A8%E6%9C%9F%E8%80%83%E6%A0%B8%E6%A0%87%E5%87%86/:0:0","tags":["devops"],"title":"试用期工作学习计划及试用期考核标准","uri":"/posts/devops/%E8%AF%95%E7%94%A8%E6%9C%9F%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%8F%8A%E8%AF%95%E7%94%A8%E6%9C%9F%E8%80%83%E6%A0%B8%E6%A0%87%E5%87%86/"},{"categories":["devops"],"content":"第一阶段（第一个月）： 学习公司的基本业务和流程。 熟悉公司的产品和服务。 了解公司的文化和价值观。 完成公司分配的任务和项目。 考核标准： 能够熟练使用公司的基本工具和软件。 能够理解公司的业务和流程。 能够按时完成公司分配的任务和项目。 ","date":"2023-03-21","objectID":"/posts/devops/%E8%AF%95%E7%94%A8%E6%9C%9F%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%8F%8A%E8%AF%95%E7%94%A8%E6%9C%9F%E8%80%83%E6%A0%B8%E6%A0%87%E5%87%86/:1:0","tags":["devops"],"title":"试用期工作学习计划及试用期考核标准","uri":"/posts/devops/%E8%AF%95%E7%94%A8%E6%9C%9F%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%8F%8A%E8%AF%95%E7%94%A8%E6%9C%9F%E8%80%83%E6%A0%B8%E6%A0%87%E5%87%86/"},{"categories":["devops"],"content":"第二阶段（第二个月）： 深入学习公司的业务和流程。 掌握公司的产品和服务。 参与公司的项目并提出建设性意见。 学习并掌握公司的工作方法和流程。 考核标准： 能够独立完成公司分配的任务和项目。 能够提出建设性意见，并为公司的项目做出贡献。 能够熟练使用公司的工具和软件。 ","date":"2023-03-21","objectID":"/posts/devops/%E8%AF%95%E7%94%A8%E6%9C%9F%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%8F%8A%E8%AF%95%E7%94%A8%E6%9C%9F%E8%80%83%E6%A0%B8%E6%A0%87%E5%87%86/:2:0","tags":["devops"],"title":"试用期工作学习计划及试用期考核标准","uri":"/posts/devops/%E8%AF%95%E7%94%A8%E6%9C%9F%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%8F%8A%E8%AF%95%E7%94%A8%E6%9C%9F%E8%80%83%E6%A0%B8%E6%A0%87%E5%87%86/"},{"categories":["devops"],"content":"第三阶段（第三个月）： 参与公司的重要项目。 学习并掌握公司的管理方法和流程。 掌握并运用公司的核心技能。 为公司的发展提出建设性意见。 考核标准： 能够独立完成公司的重要项目。 能够为公司的发展提出建设性意见。 能够掌握并运用公司的核心技能。 能够理解并运用公司的管理方法和流程。 以上是一个可能的试用期工作学习计划及试用期考核标准，具体的计划和标准可以根据公司的实际情况进行调整。 ","date":"2023-03-21","objectID":"/posts/devops/%E8%AF%95%E7%94%A8%E6%9C%9F%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%8F%8A%E8%AF%95%E7%94%A8%E6%9C%9F%E8%80%83%E6%A0%B8%E6%A0%87%E5%87%86/:3:0","tags":["devops"],"title":"试用期工作学习计划及试用期考核标准","uri":"/posts/devops/%E8%AF%95%E7%94%A8%E6%9C%9F%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%8F%8A%E8%AF%95%E7%94%A8%E6%9C%9F%E8%80%83%E6%A0%B8%E6%A0%87%E5%87%86/"},{"categories":["vue"],"content":"export default语句 在JavaScript中，export default语句用于将模块中的一个值作为默认导出。默认导出是模块中的主要导出，它通常是模块中的一个函数、类或对象。当其他文件导入模块时，它们可以使用import语句来获取默认导出，并将其分配给任何名称。 以下是一个示例，展示了如何使用export default语句导出一个函数： // math.mjs const add = (a, b) =\u003e a + b; const subtract = (a, b) =\u003e a - b; export default function multiply(a, b) { return a * b; } 在这个示例中，我们首先定义了两个函数add和subtract。然后，我们使用export default语句将multiply函数作为默认导出。这意味着其他文件可以使用以下语法导入multiply函数： // other.mjs import multiply from './math.mjs'; console.log(multiply(2, 3)); // 输出 6 在这个示例中，我们使用import语句将multiply函数导入到另一个文件中。我们使用multiply函数计算2和3的乘积，并将结果打印到控制台中。 需要注意的是，每个模块只能有一个默认导出。如果您需要导出多个值，可以使用命名导出语法，例如export const。 ","date":"2023-03-20","objectID":"/posts/vue/js%E4%B8%AD%E7%9A%84exportdefault%E4%BD%9C%E7%94%A8/:1:0","tags":["vue"],"title":"Js中的export,default作用","uri":"/posts/vue/js%E4%B8%AD%E7%9A%84exportdefault%E4%BD%9C%E7%94%A8/"},{"categories":["vue"],"content":"linux 如何运行js文件 如果要在linux 命令行访问，需要创建一个文件 // 在 package.json 文件中 { \"type\": \"module\" } 然后运行命令 node other.mjs 正常的话，命令行控制台会输出6 ","date":"2023-03-20","objectID":"/posts/vue/js%E4%B8%AD%E7%9A%84exportdefault%E4%BD%9C%E7%94%A8/:2:0","tags":["vue"],"title":"Js中的export,default作用","uri":"/posts/vue/js%E4%B8%AD%E7%9A%84exportdefault%E4%BD%9C%E7%94%A8/"},{"categories":["vue"],"content":"在 Vue 3 中，src/main.js 文件是应用程序的主要入口点。在这个文件中，你需要进行一些基本的配置，例如导入 Vue 库、创建 Vue 实例、挂载 Vue 实例等。 以下是一个示例 src/main.js 文件的基本配置： import { createApp } from 'vue'; import App from './App.vue'; const app = createApp(App); app.mount('#app'); 在这个示例中，我们首先导入了 createApp 函数和 App 组件，然后使用 createApp 函数创建了一个 Vue 实例，并将 App 组件作为根组件传递给它。最后，我们使用 mount 方法将 Vue 实例挂载到 HTML 元素上。 你还可以在 createApp 函数中进行其他配置，例如添加插件、定义全局组件、定义全局指令等。例如，以下是一个示例 src/main.js 文件，其中我们添加了 vue-router 插件和一个全局组件： import { createApp } from 'vue'; import App from './App.vue'; import router from './router'; import MyComponent from './components/MyComponent.vue'; const app = createApp(App); app.use(router); app.component('my-component', MyComponent); app.mount('#app'); 在这个示例中，我们首先导入了 vue-router 插件和一个名为 MyComponent 的全局组件。然后，我们使用 use 方法添加 vue-router 插件，并使用 component 方法注册 MyComponent 全局组件。最后，我们使用 mount 方法将 Vue 实例挂载到 HTML 元素上。 ","date":"2023-03-20","objectID":"/posts/vue/main.js%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/:0:0","tags":["vue"],"title":"Main.js文件配置","uri":"/posts/vue/main.js%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/"},{"categories":["大作手"],"content":" 價漲量漲，買入信號： 成交量持續增加，股價趨勢也轉為上升，這是短中線最佳的買入信號。「價漲量漲」是最常見的多頭主動進攻模式，應積極進場買入與主力共舞。 價漲量縮，繼續持有： 成交量減少，股價仍在繼續上升，適宜繼續持股，即使籌碼被完全鎖定，也只能是小資金短線參與，因為股價已經有了相當的漲幅，接近上漲末期了。有時在上漲初期也會出現「價漲量縮」，但可能是曇花一現，經過補量後仍有上漲空間。 價跌量增，棄賣觀望： 股價經過長期大幅下跌之後，出現成交量增加，即使股價仍在下跌，也要慎重對待極度恐慌的「多殺多」情況產生。所以，此階段的操作原則是放棄賣出、空倉觀望。低價區的量增說明有資金接手，說明後期有望形成底部或反彈的產生，可以適時關注。有時若在趨勢逆轉跌勢的初期出現價跌量增，那麼更應果斷地清倉出局。 價跌量縮，賣出信號： 成交量繼續減少，股價趨勢開始轉為下降，為賣出信號。此為無量下跌，底部遙遙無期。所謂「多頭不死、跌勢不止」，一直跌到多頭徹底喪失信心認賠殺出，爆出大的成交量時，跌勢才會停止。所以，在操作上，只要趨勢逆轉，應及時停損出場。 價平量增，轉多信號： 股價經過持續下跌來到低檔區，出現成交量增加、股價回穩現象，此時，一般成交量的陽線明顯多於陰線，凸凹量差比較明顯，說明底部在積聚上漲動力，有主力在進貨為中線轉陽信號，可以適量買進持股待漲。有時也會在上升趨勢中途出現「價平量增」，則說明股價上漲暫時受挫，只要上升趨勢未破，一般整理後仍會有行情。 價平量縮，警戒信號： 成交量顯著減少，股價經過長期大幅上漲之後，進行橫向整理不再上漲，此為警戒出貨的信號。此階段如果突發巨量拉出大陽或大陰線，無論有無利好利空消息，均應果斷出場。 ","date":"2023-03-19","objectID":"/posts/%E5%A4%A7%E4%BD%9C%E6%89%8B/%E9%87%8F%E4%BB%B7%E5%92%8C%E6%B6%A8%E8%B7%8C%E5%85%B3%E7%B3%BB/:0:0","tags":["大作手"],"title":"量价和涨跌关系","uri":"/posts/%E5%A4%A7%E4%BD%9C%E6%89%8B/%E9%87%8F%E4%BB%B7%E5%92%8C%E6%B6%A8%E8%B7%8C%E5%85%B3%E7%B3%BB/"},{"categories":["devops"],"content":"运维管理中的流程通常包括以下几个方面： 故障管理流程：当系统出现故障时，需要有明确的故障处理流程，包括故障报告、故障诊断、故障修复、故障恢复等环节。 变更管理流程：当需要对系统进行变更时，需要有明确的变更管理流程，包括变更申请、变更评估、变更批准、变更实施、变更验证等环节。 安全管理流程：当需要对系统进行安全管理时，需要有明确的安全管理流程，包括安全检查、漏洞修复、安全加固等环节。 日常运维流程：运维人员需要按照日常运维流程进行工作，包括系统监控、性能优化、备份恢复、容量规划等环节。 服务管理流程：当需要提供服务时，需要有明确的服务管理流程，包括服务需求分析、服务计划、服务实施、服务监控等环节。 资源管理流程：管理和优化资源的使用，包括硬件资源、软件资源、人力资源等。 以上流程是运维管理中比较常见的流程，通过建立流程可以规范运维工作的流程，提高工作效率和质量。 ","date":"2023-03-17","objectID":"/posts/devops/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E6%B5%81%E7%A8%8B/:1:0","tags":["devops"],"title":"运维管理中的流程","uri":"/posts/devops/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E6%B5%81%E7%A8%8B/"},{"categories":["devops"],"content":"服务管理流程 以下是一个简单的服务管理流程实施计划： 服务需求分析：收集和分析用户对服务的需求，包括用户需求、业务需求等，以便制定服务计划和实施方案。 服务计划：制定服务计划，包括服务目标、服务内容、服务标准、服务时间等，以便明确服务的范围和要求。 服务实施：按照服务计划进行服务实施，包括服务开发、服务测试、服务部署等环节，以确保服务能够按照计划顺利实施。 服务监控：对服务进行监控和评估，包括服务质量、服务效果、服务反馈等，以便及时发现问题并进行改进。 服务改进：根据监控结果和用户反馈，对服务进行改进和优化，以提高服务质量和用户满意度。 服务维护：对服务进行维护和更新，包括服务升级、服务维护、服务备份等，以确保服务的稳定性和可靠性。 总之，服务管理流程需要根据具体情况进行制定和实施，以确保服务能够按照计划顺利实施，并且能够不断优化和改进。 ","date":"2023-03-17","objectID":"/posts/devops/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E6%B5%81%E7%A8%8B/:2:0","tags":["devops"],"title":"运维管理中的流程","uri":"/posts/devops/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E6%B5%81%E7%A8%8B/"},{"categories":["devops"],"content":"资源管理流程 以下是一个简单的资源管理流程实施方案： 硬件资源管理：对硬件资源进行管理，包括服务器、网络设备、存储设备等，需要制定硬件采购计划、硬件配置管理、硬件维护保养等流程，以确保硬件资源的稳定和可靠性。 软件资源管理：对软件资源进行管理，包括操作系统、数据库、应用程序等，需要制定软件采购计划、软件配置管理、软件升级维护等流程，以确保软件资源的稳定和安全性。 人力资源管理：对人力资源进行管理，包括招聘、培训、考核等，需要制定人力资源管理计划、人员配置管理、人员绩效考核等流程，以确保团队的稳定和发展。 财务资源管理：对财务资源进行管理，包括预算管理、成本控制、费用核算等，需要制定财务管理计划、费用审批管理、财务报表分析等流程，以确保资源的合理利用和成本控制。 容量规划：对资源容量进行规划和管理，包括硬件容量、软件容量、网络容量等，需要制定容量规划计划、容量监控管理、容量扩展预测等流程，以确保资源能够满足业务需求。 总之，资源管理流程需要根据具体情况进行制定和实施，以确保资源能够得到有效的管理和利用，同时也需要不断优化和改进，以适应业务的发展和变化。 ","date":"2023-03-17","objectID":"/posts/devops/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E6%B5%81%E7%A8%8B/:3:0","tags":["devops"],"title":"运维管理中的流程","uri":"/posts/devops/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E6%B5%81%E7%A8%8B/"},{"categories":["devops"],"content":"运维工程师可以通过以下方式来量化工作： 服务器数量：记录服务器的数量和类型，以便了解团队所管理的服务器规模。 故障处理时间：记录故障处理的时间，以便了解团队的故障处理效率。 系统可用性：记录系统的可用性和稳定性，以便了解团队所管理的系统的稳定性情况。 安全漏洞修复：记录安全漏洞修复的数量和时间，以便了解团队的安全工作情况。 自动化程度：记录自动化程度的提高情况，例如自动化脚本的编写和使用情况，以便了解团队的自动化程度。 成本控制：记录成本控制情况，例如服务器和软件的采购成本，以便了解团队的成本控制情况。 用户满意度：记录用户满意度和反馈，以便了解团队的服务质量和用户体验。 总之，量化工作可以帮助运维工程师更好地了解工作进展和成果，并为团队的工作提供有力的支持。 还有稳定性量化体系、成本量化体系、效率量化体系 ","date":"2023-03-16","objectID":"/posts/devops/%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%A6%82%E4%BD%95%E9%87%8F%E5%8C%96%E5%B7%A5%E4%BD%9C/:0:0","tags":["devops"],"title":"运维工程师如何量化工作","uri":"/posts/devops/%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%A6%82%E4%BD%95%E9%87%8F%E5%8C%96%E5%B7%A5%E4%BD%9C/"},{"categories":["devops"],"content":"运维团队写周报的目的是为了向管理层和同事汇报上周的工作进展和成果，以及下周的计划和目标。以下是一些编写周报的建议： 确定周报的格式和内容：周报的格式可以根据团队的需要进行调整，但通常包括工作进展、问题和解决方案、下周计划和目标等内容。 每日记录工作内容：每天记录工作内容和进展，以便在写周报时能够更准确地反映工作进展和成果。 突出重点：在写周报时，应重点突出上周的重要工作和成果，以及下周的重点计划和目标。 量化工作成果：在写周报时，应尽量量化工作成果，例如服务器的数量、故障处理时间等，以便更好地展示工作的效果。 避免使用专业术语：周报是向管理层和同事汇报工作进展的一种方式，因此应尽量避免使用过多的专业术语，以便让读者更容易理解。 定期发送周报：周报应该在每周的固定时间发送，以便管理层和同事能够及时了解团队的工作进展和成果。 总之，写周报是一个重要的沟通工具，可以帮助运维团队更好地与其他团队成员进行沟通和协作。 ","date":"2023-03-16","objectID":"/posts/devops/%E8%BF%90%E7%BB%B4%E5%9B%A2%E9%98%9F%E5%A6%82%E4%BD%95%E5%86%99%E5%91%A8%E6%8A%A5/:0:0","tags":["devops"],"title":"运维团队如何写周报","uri":"/posts/devops/%E8%BF%90%E7%BB%B4%E5%9B%A2%E9%98%9F%E5%A6%82%E4%BD%95%E5%86%99%E5%91%A8%E6%8A%A5/"},{"categories":["云"],"content":"单个或多个资源定义 授予单个或多个资源权限时可采用下述的六段式描述方式，每种产品都拥有其各自的资源和对应的资源定义详情。 六段式定义方式如下所示： qcs:project_id:service_type:region:account:resource 资源六段式包含以下六个字段，详细含义及示例如下： 字段名称 含义及取值 是否必填 示例 qcs qcloud service 的简称，表示是腾讯云的云资源。 是 qcs project_id 描述项目信息，仅兼容 CAM 早期逻辑，当前策略语法禁止填写该信息，置空即可。 否 置空 service_type 描述产品简称，详细可查看 支持 CAM 的产品 中的 “CAM 中简称”。值为空时表示所有产品。 否 云服务器为 cvm内容分发网络为 cdn region 描述地域信息，地域命名方式请参考 地域列表；值为空的时候表示所有地域。 否 华北地区(北京)为 ap-beijing华南地区(广州)为 ap-guangzhou account 描述资源拥有者的主账号信息，目前支持两种方式描述资源拥有者，uin 和 uid 方式。uin 方式，即主账号的账户ID，表示为uin/${uin}。uid 方式，即主账号的 APPID，表示为uid/${appid}，仅 COS 和 CAS 业务的资源拥有者使用该方式描述。值为空的时候表示创建策略的 CAM 用户所属的主账号。 否 uin 如：uin/12345678uid 如：uid/10001234 resource 描述各产品的具体资源详情，目前支持两种方式描述资源信息，resource_type/${resourceid} 和 \u003cresource_type\u003e/\u003cresource_path\u003e。resource_type/${resourceid}：resourcetype 为资源前缀，描述资源类型，详细可查看 支持 CAM 的业务接口 中产品的资源六段式；${resourceid} 为具体的资源 ID，可前往各个产品控制台查看，值为 * 时代表该类型资源的所有资源。\u003cresource_type\u003e/\u003cresource_path\u003e：resourcetype 为资源前缀，描述资源类型；\u003cresource_path\u003e 为资源路径，该方式下，支持目录级的前缀匹配。详细可查看 支持 CAM 的业务接口 中产品的资源六段式。 是 云服务器：instance/ins-1云数据库 MySQL：instanceId/cdb-1对象存储 COS：prefix//10001234/bucket1/* 表示 bucket1 下的所有文件。COS 资源（resource）支持多种类型，详情请参见 COS 授权策略使用指引 ","date":"2023-03-16","objectID":"/posts/%E4%BA%91/%E8%85%BE%E8%AE%AF%E4%BA%91json%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%9D%83%E9%99%90%E7%AD%96%E7%95%A5/:1:0","tags":["云"],"title":"腾讯云JSON格式的权限策略","uri":"/posts/%E4%BA%91/%E8%85%BE%E8%AE%AF%E4%BA%91json%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%9D%83%E9%99%90%E7%AD%96%E7%95%A5/"},{"categories":["云"],"content":"禁止访问消息队列角色管理-指定环境 策略语法： { \"version\": \"2.0\", \"statement\": [ { \"effect\": \"deny\", \"action\": [ \"tdmq:CreateEnvironmentRole\", \"tdmq:CreateRole\", \"tdmq:DeleteEnvironmentRoles\", \"tdmq:DeleteRoles\", \"tdmq:ModifyEnvironmentRole\", \"tdmq:ModifyRole\", \"tdmq:DescribeEnvironmentRoles\", \"tdmq:DescribeRoles\" ], \"resource\": [ \"qcs::tdmq::uin/1000xxxxxx584:role/pulsar-xxxxxx/*\" ] } ] } ","date":"2023-03-16","objectID":"/posts/%E4%BA%91/%E8%85%BE%E8%AE%AF%E4%BA%91json%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%9D%83%E9%99%90%E7%AD%96%E7%95%A5/:2:0","tags":["云"],"title":"腾讯云JSON格式的权限策略","uri":"/posts/%E4%BA%91/%E8%85%BE%E8%AE%AF%E4%BA%91json%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%9D%83%E9%99%90%E7%AD%96%E7%95%A5/"},{"categories":["云"],"content":"服务级、操作级和资源级 其中授权粒度按照粒度粗细分为服务级、操作级和资源级三个级别。 服务级：定义对服务的整体是否拥有访问权限，分为允许对服务拥有全部操作权限或者拒绝对服务拥有全部操作权限。 操作级：定义对服务的特定接口（API）是否拥有访问权限，例如：授权某账号对云服务器服务进行只读操作。 资源级：定义对特定资源是否有访问权限，这是最细的授权粒度，例如：授权某账号仅读写操作某台云服务器。 ","date":"2023-03-16","objectID":"/posts/%E4%BA%91/%E8%85%BE%E8%AE%AF%E4%BA%91json%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%9D%83%E9%99%90%E7%AD%96%E7%95%A5/:3:0","tags":["云"],"title":"腾讯云JSON格式的权限策略","uri":"/posts/%E4%BA%91/%E8%85%BE%E8%AE%AF%E4%BA%91json%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%9D%83%E9%99%90%E7%AD%96%E7%95%A5/"},{"categories":["devops"],"content":"要从0到1实施DevOps，可以按照以下步骤进行： ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:1:0","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["devops"],"content":"确定目标和需求： 首先，需要明确为什么要实施DevOps，以及实施DevOps的目标和需求是什么。例如，是否需要提高软件交付速度和质量，是否需要更快地响应客户需求，是否需要降低运维成本等等。根据这些需求，可以确定实施DevOps的重点和方向。 ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:1:1","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["devops"],"content":"培训团队： DevOps需要涉及多个团队和角色，包括开发、测试、运维等。因此，需要对团队进行培训，让他们了解DevOps的基本理念、流程和工具。 ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:1:2","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["devops"],"content":"选择工具和技术： 根据实际需求和团队技术水平，选择适合的工具和技术来支持DevOps实施。例如，选择版本控制工具、持续集成工具、自动化部署工具、监控工具等等。 ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:1:3","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["devops"],"content":"设计流程和规范： 根据实际需求和选定的工具和技术，设计DevOps流程和规范，包括代码管理、构建和测试、部署和运维、监控和日志等方面。这些流程和规范应该能够满足实际需求，并且符合最佳实践。 ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:1:4","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["devops"],"content":"实施和测试： 在实施DevOps之前，需要进行充分的测试和验证。可以先在一个小规模的项目或团队中进行试点，验证流程和工具的可行性和有效性。在试点成功后，可以逐步扩大范围，将DevOps应用到更多的项目和团队中。 ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:1:5","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["devops"],"content":"持续改进： DevOps是一个持续改进的过程，需要不断地优化流程和工具，提高效率和质量。因此，在实施DevOps后，需要定期评估和改进DevOps流程和规范，以适应不断变化的需求和技术。 ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:1:6","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["devops"],"content":"devops devsecops bizdevops区别 DevOps、DevSecOps和BizDevOps都是软件开发和运维领域的术语，它们的区别如下： DevOps：DevOps是一种软件开发和运维方法论，旨在通过自动化软件开发、测试、部署和运维过程，提高软件交付的速度、质量和可靠性。DevOps强调开发和运维之间的协作和沟通，以实现快速、可靠的软件交付。 DevSecOps：DevSecOps是在DevOps的基础上加入了安全性的概念，旨在将安全性作为整个软件开发和运维过程的一部分，从而提高软件系统的安全性和可靠性。DevSecOps强调开发、运维和安全团队之间的协作和沟通，以实现安全、可靠的软件交付。 BizDevOps：BizDevOps是在DevOps的基础上加入了业务的概念，旨在将业务需求作为整个软件开发和运维过程的一部分，从而提高软件系统的价值和业务影响力。BizDevOps强调开发、运维和业务团队之间的协作和沟通，以实现业务价值的最大化。 总之，DevOps、DevSecOps和BizDevOps都是为了提高软件开发和运维效率和质量，但它们的重点不同。DevOps强调开发和运维之间的协作和沟通，DevSecOps强调安全性，BizDevOps强调业务价值。 ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:2:0","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["devops"],"content":"devops规范 以下是一些DevOps规范的建议： ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:3:0","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["devops"],"content":"版本控制规范： 使用版本控制工具（如Git）来管理代码和配置文件，并遵循一些最佳实践，例如分支管理、提交信息规范、代码审查等等。 ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:3:1","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["devops"],"content":"持续集成规范： 使用持续集成工具（如Jenkins）自动构建和测试代码，并遵循一些最佳实践，例如构建脚本规范、测试覆盖率要求、构建结果通知等等。 ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:3:2","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["devops"],"content":"自动化部署规范： 使用自动化部署工具（如Ansible、Puppet、Chef）自动部署代码和配置文件到目标环境，并遵循一些最佳实践，例如部署流程规范、回滚策略、环境变量管理等等。 ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:3:3","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["devops"],"content":"监控和日志规范： 使用监控工具（如Nagios、Zabbix）监控应用程序和基础设施的运行状况，并使用日志管理工具（如ELK、Graylog）收集和分析日志，并遵循一些最佳实践，例如监控指标定义、告警策略、日志格式规范等等。 ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:3:4","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["devops"],"content":"容器化和编排规范： 使用容器化技术（如Docker）将应用程序和依赖项打包为容器，并使用编排工具（如Kubernetes、Docker Compose）管理容器的部署和扩展，并遵循一些最佳实践，例如容器镜像管理、容器网络和存储管理、容器资源限制等等。 ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:3:5","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["devops"],"content":"持续交付和部署规范： 使用持续交付工具（如Jenkins Pipeline、GitLab CI/CD）自动化整个软件交付过程，包括构建、测试、部署和验证，并遵循一些最佳实践，例如交付流程规范、交付版本管理、交付验证策略等等。 以上是一些DevOps规范的建议，具体的规范应该根据实际需求和团队技术水平来确定，并且应该不断地优化和改进 ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:3:6","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["devops"],"content":"软件版本管理办法 软件版本管理是指对软件开发过程中所涉及到的各个版本进行管理和控制的一种方法。以下是一些常见的软件版本管理办法： 版本号命名规范：制定版本号命名规范，如主版本号、次版本号、修订版本号等，以便于识别和管理不同版本。 版本库管理：使用版本控制系统（VCS）管理代码库，如 Git、SVN 等，以便于追踪和管理代码的变更历史。 分支管理：使用分支管理策略，如主分支、开发分支、发布分支等，以便于管理不同阶段的代码版本和发布版本。 版本发布流程：制定版本发布流程，如测试、审核、发布等，以便于确保发布版本的质量和稳定性。 版本文档管理：对每个版本的文档进行管理，如用户手册、API 文档等，以便于开发者和用户了解版本的功能和使用方法。 版本回退管理：制定版本回退策略，如备份、恢复、回滚等，以便于在出现问题时快速回退到之前的版本。 通过以上的软件版本管理办法，可以有效地管理和控制软件开发过程中所涉及到的各个版本，提高开发效率和软件质量。 ","date":"2023-03-15","objectID":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/:4:0","tags":["devops"],"title":"Devops如何从0到1","uri":"/posts/devops/devops%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01/"},{"categories":["画图"],"content":"出入口流量图 ","date":"2023-03-14","objectID":"/posts/golang/hugo%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8mermaid%E7%BB%98%E5%9B%BE/:1:0","tags":["画图"],"title":"Hugo如何使用mermaid绘图","uri":"/posts/golang/hugo%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8mermaid%E7%BB%98%E5%9B%BE/"},{"categories":["vpn"],"content":"什么是IPsec VPN? VPN（Virtual Private Network，虚拟专用网）是一种在公用网络上建立专用网络的技术。它之所以称之为虚拟网，主要是因为VPN的两个节点之间并没有像传统专用网那样使用端到端的物理链路，而是架构在公用网络如Internet之上的逻辑网络，用户数据通过逻辑链路传输。 按照VPN协议分，常见的VPN种类有：IPsec、SSL、GRE、PPTP和L2TP等。其中IPsec是通用性较强的一种VPN技术，适用于多种网络互访的场景。 IPsec VPN是指采用IPsec实现远程接入的一种VPN技术，通过在公网上为两个或多个私有网络之间建立IPsec隧道，并通过加密和验证算法保证VPN连接的安全。 IPsec VPN保护的是点对点之间的通信，通过IPsec VPN可以在主机和主机之间、主机和网络安全网关之间或网络安全网关（如路由器、防火墙）之间建立安全的隧道连接。其协议主要工作在IP层，在IP层对数据包进行加密和验证。 相对于其他VPN技术，IPsec VPN安全性更高，数据在IPsec隧道中都是加密传输，但相应的IPsec VPN在配置和组网部署上更复杂。 ","date":"2023-03-14","objectID":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/:1:0","tags":["vpn"],"title":"什么是IPsec","uri":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/"},{"categories":["vpn"],"content":"IPsec是如何工作的？ IPsec的工作原理大致可以分为4个阶段： 识别“感兴趣流”。网络设备接收到报文后，通常会将报文的五元组等信息和IPsec策略进行匹配来判断报文是否要通过IPsec隧道传输，需要通过IPsec隧道传输的流量通常被称为“感兴趣流”。 协商安全联盟（Security Association，以下简称SA）。SA是通信双方对某些协商要素的约定，比如双方使用的安全协议、数据传输采用的封装模式、协议采用的加密和验证算法、用于数据传输的密钥等，通信双方之间只有建立了SA，才能进行安全的数据传输。 识别出感兴趣流后，本端网络设备会向对端网络设备发起SA协商。在这一阶段，通信双方之间通过IKE协议先协商建立IKE SA（用于身份验证和密钥信息交换），然后在IKE SA的基础上协商建立IPsec SA（用于数据安全传输）。 数据传输。IPsec SA建立成功后，双方就可以通过IPsec隧道传输数据了。 IPsec为了保证数据传输的安全性，在这一阶段需要通过AH或ESP协议对数据进行加密和验证。加密机制保证了数据的机密性，防止数据在传输过程中被窃取；验证机制保证了数据的真实可靠，防止数据在传输过程中被仿冒和篡改。 隧道拆除。通常情况下，通信双方之间的会话老化（连接断开）即代表通信双方数据交换已经完成，因此为了节省系统资源，通信双方之间的隧道在空闲时间达到一定值后会自动删除。 如图所示，IPsec发送方会使用加密算法和加密密钥对报文进行加密，即将原始数据“乔装打扮”封装起来。然后发送方和接收方分别通过相同的验证算法和验证密钥对加密后的报文进行处理得到完整性校验值ICV。如果两端计算的ICV相同则表示该报文在传输过程中没有被篡改，接收方对验证通过的报文进行解密处理；如果ICV不相同则直接丢弃报文。 ","date":"2023-03-14","objectID":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/:2:0","tags":["vpn"],"title":"什么是IPsec","uri":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/"},{"categories":["vpn"],"content":"IPsec的3个重要协议- IKE/AH/ESP IKE（Internet Key Exchange，因特网密钥交换） IKE协议是一种基于UDP的应用层协议，它主要用于SA协商和密钥管理。 IKE协议分IKEv1和IKEv2两个版本，IKEv2与IKEv1相比，修复了多处公认的密码学方面的安全漏洞，提高了安全性能，同时简化了安全联盟的协商过程，提高了协商效率。 IKE协议属于一种混合型协议，它综合了ISAKMP（Internet Security Association and Key Management Protocol）、Oakley协议和SKEME协议这三个协议。其中，ISAKMP定义了IKE SA的建立过程，Oakley和SKEME协议的核心是DH（Diffie-Hellman）算法，主要用于在Internet上安全地分发密钥、验证身份，以保证数据传输的安全性。IKE SA和IPSec SA需要的加密密钥和验证密钥都是通过DH算法生成的，它还支持密钥动态刷新。 AH（Authentication Header，认证头） AH协议用来对IP报文进行数据源认证和完整性校验，即用来保证传输的IP报文的来源可信和数据不被篡改，但它并不提供加密功能。AH协议在每个数据包的标准IP报文头后面添加一个AH报文头，AH协议对报文的完整性校验的范围是整个IP报文。 ESP（Encapsulating Security Payload，封装安全载荷） ESP协议除了对IP报文进行数据源认证和完整性校验以外，还能对数据进行加密。ESP协议在每一个数据包的标准IP报头后方添加一个ESP报文头，并在数据包后方追加一个ESP尾（ESP Trailer和ESP Auth data）。ESP协议在传输模式下的数据完整性校验范围不包括IP头，因此它不能保证IP报文头不被篡改。 AH和ESP可以单独使用，也可以同时使用。AH和ESP同时使用时，报文会先进行ESP封装，再进行AH封装；IPsec解封装时，先进行AH解封装，再进行ESP解封装。 ","date":"2023-03-14","objectID":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/:3:0","tags":["vpn"],"title":"什么是IPsec","uri":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/"},{"categories":["vpn"],"content":"IPsec使用的端口 IPsec中IKE协议采用UDP 500端口发起和响应协商，因此为了使IKE协商报文顺利通过网关设备，通常要在网关设备上配置安全策略放开UDP 500端口。另外，在IPsec NAT穿越场景下，还需要放开UDP 4500端口。 而AH和ESP属于网络层协议，不涉及端口。为了使IPsec隧道能正常建立，通常还要在网关设备上配置安全策略放开AH（IP协议号是51）和ESP（IP协议号是50）服务。 ","date":"2023-03-14","objectID":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/:4:0","tags":["vpn"],"title":"什么是IPsec","uri":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/"},{"categories":["vpn"],"content":"IPsec VPN和SSL VPN对比 IPsec和SSL是部署VPN时最常用的两种技术，它们都有加密和验证机制保证用户远程接入的安全性。从以下几个方面对IPsec VPN和SSL VPN进行对比： ","date":"2023-03-14","objectID":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/:5:0","tags":["vpn"],"title":"什么是IPsec","uri":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/"},{"categories":["vpn"],"content":"OSI参考模型工作层级 OSI定义了网络互连的七层框架：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。IPsec工作在网络层，它直接运行在IP（Internet Protocol，互联网协议）之上。而SSL工作在应用层，是一种应用层协议，它加密的是HTTP流量，而不是直接加密IP数据包。 ","date":"2023-03-14","objectID":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/:5:1","tags":["vpn"],"title":"什么是IPsec","uri":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/"},{"categories":["vpn"],"content":"配置部署 IPsec VPN通常适用于Site to Site（站点到站点）的组网，要求站点分别部署VPN网关或远程用户安装专用的VPN客户端，因此配置部署复杂度和维护成本都比较高。但SSL VPN通常适用于Client to Site（客户端到站点）的组网，只要求远程用户使用支持SSL的标准浏览器安装指定插件即可进行访问，通过数据中心部署VPN网关进行集中管理和维护，因此配置部署更简单，维护成本相对较低。 ","date":"2023-03-14","objectID":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/:5:2","tags":["vpn"],"title":"什么是IPsec","uri":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/"},{"categories":["vpn"],"content":"安全性 IPSec工作在网络层，对站点间传输的所有数据进行保护。IPSec VPN要求远程用户安装专用的VPN客户端或在站点部署VPN网关设备，用户访问会受到客户端或网关在用户认证规则、安全策略规则或内容安全过滤方面的检查，因此安全性更高。而SSL VPN不要求安装专用客户端或接入站点部署网关设备，更容易受到安全威胁的影响。 ","date":"2023-03-14","objectID":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/:5:3","tags":["vpn"],"title":"什么是IPsec","uri":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/"},{"categories":["vpn"],"content":"访问控制 IPsec工作在网络层，不能基于应用进行细粒度的访问控制。而SSL VPN在精细化访问控制上更灵活，网络管理员可以将网络资源根据不同的应用类型划分为不同的资源类型，每一类资源的访问权限不同。 ","date":"2023-03-14","objectID":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/:5:4","tags":["vpn"],"title":"什么是IPsec","uri":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/"},{"categories":["vpn"],"content":"参考 转载 ","date":"2023-03-14","objectID":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/:6:0","tags":["vpn"],"title":"什么是IPsec","uri":"/posts/vpn/%E4%BB%80%E4%B9%88%E6%98%AFipsec/"},{"categories":["draft"],"content":"一站式 DevOps 平台 提供标准化、自动化、服务化、数据化的 DevOps 平台，实现从需求到部署高频、顺畅、高质量的价值交付 ","date":"2023-03-08","objectID":"/posts/devops/%E4%B8%80%E7%AB%99%E5%BC%8Fdevops%E5%B9%B3%E5%8F%B0/:1:0","tags":["draft"],"title":"一站式DevOps平台","uri":"/posts/devops/%E4%B8%80%E7%AB%99%E5%BC%8Fdevops%E5%B9%B3%E5%8F%B0/"},{"categories":["k8s"],"content":" $ helm list NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION my-emqx mid 1 2022-07-05 17:29:44.314166753 +0800 CST deployed emqx-5.0.2 5.0.2 zookeeper mid 1 2022-04-20 11:20:45.07677177 +0800 CST deployed zookeeper-5.1.1 3.5.6 $ helm uninstall my-emqx release \"my-emqx\" uninstalled $ helm uninstall zookeeper W0308 14:36:09.458819 141991 warnings.go:70] policy/v1beta1 PodDisruptionBudget is deprecated in v1.21+, unavailable in v1.25+; use policy/v1 PodDisruptionBudget release \"zookeeper\" uninstalled $ helm list NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION ## 列出所有命名空间 $ helm list -A NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION ack-node-local-dns kube-system 1 2021-11-14 11:20:03.795459724 +0800 CST deployed ack-node-local-dns-1.3.5 1.3.5 ack-node-problem-detector kube-system 2 2022-12-02 14:36:49.888033773 +0800 CST deployed ack-node-problem-detector-1.2.11 0.8.0 ack-onepilot ack-onepilot 1 2022-10-14 16:49:41.872857464 +0800 CST deployed ack-onepilot-3.0.4 3.0.4 arms-cmonitor arms-prom 1 2022-01-14 14:53:22.012099821 +0800 CST deployed ack-arms-cmonitor-1.0.0 1.0.0 arms-pilot arms-pilot 1 2022-10-14 16:44:25.433792356 +0800 CST deployed ack-arms-pilot-1.52.3 1.52.3 arms-prometheus arms-prom 2 2022-11-16 10:25:34.959976213 +0800 CST deployed ack-arms-prometheus-1.1.9 1.1.1 cert-manager cert-manager 1 2022-01-11 18:11:21.641753546 +0800 CST deployed cert-manager-v0.13.1 v0.13.1 kruise default 1 2021-12-02 10:06:09.494004253 +0000 UTC deployed kruise-0.10.1 my-release default 1 2022-03-02 11:22:48.551002175 +0800 CST deployed external-dns-6.1.0 0.10.2 tailscale-subnet-router default 2 2022-03-16 15:55:23.197996758 +0800 CST deployed tailscale-relay-0.1.1 v1.18.2 ","date":"2023-03-08","objectID":"/posts/k8s/helm%E5%8D%B8%E8%BD%BD%E5%B7%B2%E7%BB%8F%E5%AE%89%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8/:0:0","tags":["k8s"],"title":"Helm卸载已经安装的应用","uri":"/posts/k8s/helm%E5%8D%B8%E8%BD%BD%E5%B7%B2%E7%BB%8F%E5%AE%89%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":["golang"],"content":"简介 croc是一种允许任何两台计算机简单安全地传输文件和文件夹的工具。据我所知，croc是唯一可以执行以下所有操作的CLI 文件传输工具： 允许任何两台计算机传输数据（使用中继服务器） 提供端到端加密（使用 PAKE） 实现轻松的跨平台传输（Windows、Linux、Mac） 允许多个文件传输 允许恢复被中断的传输 不需要本地服务器或端口转发 ipv6-first和 ipv4 后备 可以使用代理，比如tor ","date":"2023-03-07","objectID":"/posts/golang/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7croc/:1:0","tags":["golang"],"title":"文件传输工具croc","uri":"/posts/golang/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7croc/"},{"categories":["golang"],"content":"安装 go install github.com/schollz/croc/v9@latest ","date":"2023-03-07","objectID":"/posts/golang/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7croc/:2:0","tags":["golang"],"title":"文件传输工具croc","uri":"/posts/golang/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7croc/"},{"categories":["golang"],"content":"使用 # send croc send --code code-phrase [file(s)-or-folder] # receive croc code-phrase send : 表示发送 –code：指定传输和接收的code(不小于6个字符)，用于建立密码验证密钥协议 ( PAKE[3] ），也可以不带此选项会自动生成code。 ","date":"2023-03-07","objectID":"/posts/golang/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7croc/:3:0","tags":["golang"],"title":"文件传输工具croc","uri":"/posts/golang/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7croc/"},{"categories":["golang"],"content":"croc 发送 $croc send --code 123456 zshrc Sending 'zshrc' (3.9 kB) Code is: 123456 On the other computer run croc 123456 Sending (-\u003e192.168.0.103:62532) 100% |████████████████████| (3.9/3.9 kB, 1.711 MB/s) ","date":"2023-03-07","objectID":"/posts/golang/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7croc/:3:1","tags":["golang"],"title":"文件传输工具croc","uri":"/posts/golang/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7croc/"},{"categories":["golang"],"content":"croc 接收 $ croc 123456 Accept 'zshrc' (3.9 kB)? (Y/n) y Receiving (\u003c-192.168.0.104:9009) 100% |████████████████████| (3.9/3.9 kB, 213.064 kB/s) ","date":"2023-03-07","objectID":"/posts/golang/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7croc/:3:2","tags":["golang"],"title":"文件传输工具croc","uri":"/posts/golang/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7croc/"},{"categories":["golang"],"content":"其他例子 使用管道传输 cat [filename] | croc send 传输文本 croc send --text \"hello world\" ","date":"2023-03-07","objectID":"/posts/golang/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7croc/:3:3","tags":["golang"],"title":"文件传输工具croc","uri":"/posts/golang/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7croc/"},{"categories":["golang"],"content":"使用自建中继服务器 默认情况下，croc使用公共中继器。如果你可以不想使用公共的中继服务器，，你可以搭建自己的中继服务器，端口你可以自定义，但必须至少有两个端口。第一个端口用于通信，后续端口用于多路数据传输。 docker run -d -p 9009-9013:9009-9013 -e CROC_PASS='croc_relay_1234' schollz/croc 发送文件 $croc --pass croc_relay_1234 --relay \"192.168.0.103:9009\" send test.md Sending 'test.md' (13 B) Code is: 0484-memo-capital-papa On the other computer run croc --relay 192.168.0.103:9009 --pass croc_relay_1234 0484-memo-capital-papa Sending (-\u003e192.168.0.103:49170) 100% |████████████████████| (13/13 B, 37.528 kB/s) 接收文件 $croc --relay 192.168.0.103:9009 --pass croc_relay_1234 0484-memo-capital-papa Accept 'test.md' (13 B)? (Y/n) y Receiving (\u003c-127.0.0.1:65528) 100% |████████████████████| (13/13 B, 9.311 kB/s) ","date":"2023-03-07","objectID":"/posts/golang/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7croc/:4:0","tags":["golang"],"title":"文件传输工具croc","uri":"/posts/golang/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7croc/"},{"categories":["代理"],"content":"介绍 GsouCloud快不快？GsouCloud是一家中高端 SSR、V2Ray 高性价比机场。虽然已经成立了一段时间，该机场一直比较低调，全站专线节点，专线不过墙，高强度加密可保护数据安全性，特点就是稳快 ，无视任何晚高峰、会议，依然4k流畅，油管长期速度保持再5万-20万之间； 写在前面：本文介绍主要是为了学习科研以及外贸工作。请遵守中华人民共和国法律法规，切勿在任何地方发布分裂，激化民族矛盾的言论。本博客不欢迎不爱国及极端人士。 BGP 隧道中转、IPLC 专线成本非常高，稳定性远比普通线路高很多，延迟低，线路质量也非常好，用户体验非常好。在特殊时期，IPLC 专线服务也几乎不受任何影响，GsouCloud绝对是对线路质量要求高的用户的最佳选择之一。在使用过程中，非常稳定，可以作为追剧加速的主力机场使用。 高速稳定 体验宛若身在海外的访问速度 便携设置 我们的服务适用于 macOS、iOS、Android、Windows 和 Linux 方便易用 拥有专用的一键客户端，简单易懂不管是新手还是小白，轻松使用 节省成本 相比自托管服务可节省大量费用 全球互联 通过 IXP 连接至全球内容提供商，更加快速 运营商友好 我们的产品和您的当地运营商兼容，适用于您的固网与移动网络 多应用兼容 提供全面且可靠的第三方应用程序兼容 ","date":"2023-03-04","objectID":"/posts/%E4%BC%98%E8%B4%A8ss/ssr/v2ray%E6%9C%BA%E5%9C%BAgsoucloud/:1:0","tags":["v2ray"],"title":"V2Ray机场:GsouCloud","uri":"/posts/%E4%BC%98%E8%B4%A8ss/ssr/v2ray%E6%9C%BA%E5%9C%BAgsoucloud/"},{"categories":["代理"],"content":"多平台完美支持 Gsou Cloud的服务适用于 macOS、iOS、Android、Windows 和 Linux，借助第三方客户端，可在手机、电脑、路由器、游戏机、电视盒子中使用。 解锁流媒体，观赏和聆听优质的内容 通过 Gsou Cloud 的服务，可以观看包括 Netflix、Hulu、HBO、TVB、Happyon、AbemaTV 等在内的多种流媒体视频，聆听包括 Spotify、Pandora 等在内的流媒体音乐。 不仅仅如此，亦包含以下诸多特性 部分特性需要配合第三方客户端与托管规则使用 过滤常用网站广告、常用视频广告、其他流媒体网站广告 智能分流系统，所有国内网站直线连接，增强用户体验 Apple服务加速 (App Store、Apple Music、iCloud、iTunes等) 国外常用网站加速 (Google/Youtube/Twitter/Instgram/Github等) 在传输过程中使用最强的加密方式，保护用户数据和隐私 与诸多平台上的优秀应用程序兼容，这些应用程序由许多创新公司和开发人员开发 ","date":"2023-03-04","objectID":"/posts/%E4%BC%98%E8%B4%A8ss/ssr/v2ray%E6%9C%BA%E5%9C%BAgsoucloud/:2:0","tags":["v2ray"],"title":"V2Ray机场:GsouCloud","uri":"/posts/%E4%BC%98%E8%B4%A8ss/ssr/v2ray%E6%9C%BA%E5%9C%BAgsoucloud/"},{"categories":["代理"],"content":"套餐 套餐 每月流量(GB) 月付(元) 季付(元) 半年(元) 年付(元) Simple 100 30 60 105 180 Lite 150 30 72 126 216 Pro 225 35 84 147 252 ","date":"2023-03-04","objectID":"/posts/%E4%BC%98%E8%B4%A8ss/ssr/v2ray%E6%9C%BA%E5%9C%BAgsoucloud/:3:0","tags":["v2ray"],"title":"V2Ray机场:GsouCloud","uri":"/posts/%E4%BC%98%E8%B4%A8ss/ssr/v2ray%E6%9C%BA%E5%9C%BAgsoucloud/"},{"categories":["代理"],"content":"测速结果 ","date":"2023-03-04","objectID":"/posts/%E4%BC%98%E8%B4%A8ss/ssr/v2ray%E6%9C%BA%E5%9C%BAgsoucloud/:4:0","tags":["v2ray"],"title":"V2Ray机场:GsouCloud","uri":"/posts/%E4%BC%98%E8%B4%A8ss/ssr/v2ray%E6%9C%BA%E5%9C%BAgsoucloud/"},{"categories":["代理"],"content":"链接 https://gsoust.xyz/auth/register?code=7C7n ","date":"2023-03-04","objectID":"/posts/%E4%BC%98%E8%B4%A8ss/ssr/v2ray%E6%9C%BA%E5%9C%BAgsoucloud/:5:0","tags":["v2ray"],"title":"V2Ray机场:GsouCloud","uri":"/posts/%E4%BC%98%E8%B4%A8ss/ssr/v2ray%E6%9C%BA%E5%9C%BAgsoucloud/"},{"categories":["python"],"content":"pipx介绍 pipx 是一个 Python 工具，用于管理全局 Python 包的命令行工具。它允许用户在独立的虚拟环境中安装和运行 Python 包，同时仍然可以在系统范围内访问这些包的命令行工具。通过使用 pipx，可以更轻松地管理 Python 工具和应用程序，同时避免破坏系统范围内的 Python 环境。 ","date":"2023-03-04","objectID":"/posts/pipx%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:1:0","tags":["python"],"title":"Pipx包管理工具","uri":"/posts/pipx%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"},{"categories":["python"],"content":"pipx安装 要安装pipx，可以使用pip命令，具体步骤如下： 安装pip：如果您的系统上没有安装pip，请根据您的操作系统文档中的指示进行安装。 使用pip安装pipx：在终端窗口中输入以下命令，以在系统上安装pipx： pip install pipx ","date":"2023-03-04","objectID":"/posts/pipx%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:2:0","tags":["python"],"title":"Pipx包管理工具","uri":"/posts/pipx%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"},{"categories":["python"],"content":"使用 现在您可以使用pipx来安装Python应用程序，例如： pipx install some-package 这将使用pipx安装some-package，并在系统上创建一个隔离的虚拟环境，以确保该包的依赖项不会与您的系统中的其他软件包冲突。 chunk@chunk-ThinkPad-X1-Carbon-5th  /tmp $ pipx list venvs are in /home/chunk/.local/pipx/venvs apps are exposed on your $PATH at /home/chunk/.local/bin package pip-search 0.0.12, installed using Python 3.10.6 - pip_search package thefuck 3.32, installed using Python 3.10.6 - fuck - thefuck package yt-dlp 2023.3.3, installed using Python 3.10.6 - yt-dlp ","date":"2023-03-04","objectID":"/posts/pipx%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:3:0","tags":["python"],"title":"Pipx包管理工具","uri":"/posts/pipx%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"},{"categories":["python"],"content":"升级包 pipx upgrade cowsay # 升级pipx所有包 pipx upgrade-all ","date":"2023-03-04","objectID":"/posts/pipx%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:3:1","tags":["python"],"title":"Pipx包管理工具","uri":"/posts/pipx%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"},{"categories":["ubuntu"],"content":"环境信息 .-/+oossssoo+/-. chunk@chunk-ThinkPad-X1-Carbon-5th `:+ssssssssssssssssss+:` ---------------------------------- -+ssssssssssssssssssyyssss+- OS: Ubuntu 22.04.2 LTS x86_64 .ossssssssssssssssssdMMMNysssso. Host: 20HRS15700 ThinkPad X1 Carbon 5th /ssssssssssshdmmNNmmyNMMMMhssssss/ Kernel: 5.19.0-32-generic +ssssssssshmydMMMMMMMNddddyssssssss+ Uptime: 9 days, 8 hours, 18 mins /sssssssshNMMMyhhyyyyhmNMMMNhssssssss/ Packages: 3600 (dpkg), 7 (flatpak), 27 (snap) .ssssssssdMMMNhsssssssssshNMMMdssssssss. Shell: zsh 5.8.1 +sssshhhyNMMNyssssssssssssyNMMMysssssss+ Resolution: 1920x1080 ossyNMMMNyMMhsssssssssssssshmmmhssssssso DE: GNOME ossyNMMMNyMMhsssssssssssssshmmmhssssssso WM: Mutter +sssshhhyNMMNyssssssssssssyNMMMysssssss+ WM Theme: Adwaita .ssssssssdMMMNhsssssssssshNMMMdssssssss. Theme: Yaru [GTK2/3] /sssssssshNMMMyhhyyyyhdNMMMNhssssssss/ Icons: Yaru [GTK2/3] +sssssssssdmydMMMMMMMMddddyssssssss+ Terminal: gnome-terminal /ssssssssssshdmNNNNmyNMMMMhssssss/ CPU: Intel i7-7500U (4) @ 3.500GHz .ossssssssssssssssssdMMMNysssso. GPU: Intel HD Graphics 620 -+sssssssssssssssssyyyssss+- Memory: 12136MiB / 15760MiB `:+ssssssssssssssssss+:` .-/+oossssoo+/-. ","date":"2023-03-01","objectID":"/posts/ubuntu%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7nala/:1:0","tags":["ubuntu"],"title":"Ubuntu包管理工具nala","uri":"/posts/ubuntu%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7nala/"},{"categories":["ubuntu"],"content":"添加需要安装软件的仓库 sudo add-apt-repository ppa:phoerious/keepassxc\\n sudo apt update\\n ","date":"2023-03-01","objectID":"/posts/ubuntu%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7nala/:2:0","tags":["ubuntu"],"title":"Ubuntu包管理工具nala","uri":"/posts/ubuntu%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7nala/"},{"categories":["ubuntu"],"content":"nala安装软件 试用了一下nala,安装软件速度真的有点快 chunk@chunk-ThinkPad-X1-Carbon-5th  ~/code/github/quickstart   master ±✚  sudo nala install keepassxc --no-autoremove =================================================================================================================================================================================================================== Auto-Removable, Will Not Be Removed =================================================================================================================================================================================================================== Package: Version: Size: fcitx-config-common 0.4.10-3 58 KB fcitx-config-gtk 0.4.10-3 138 KB fcitx-module-quickphrase-editor5 1.2.7-1.2build1 146 KB gstreamer1.0-plugins-base:i386 1.20.1-1 2.7 MB gyp 0.1+20210831gitd6c5dd5-5 1.2 MB krb5-config 2.6+nmu1ubuntu1 63 KB libapparmor1:i386 3.0.4-2ubuntu2.1 177 KB libasn1-8-heimdal:i386 7.7.0+dfsg-3ubuntu1 873 KB libasound2-plugins:i386 1.2.6-1 328 KB libasound2:i386 1.2.6.1-1ubuntu1 1.3 MB libasyncns0:i386 0.8-6build2 44 KB libatk-bridge2.0-0:i386 2.38.0-3 265 KB libatk1.0-0:i386 2.36.0-3build1 203 KB libatomic1:i386 12.1.0-2ubuntu1~22.04 41 KB libatspi2.0-0:i386 2.44.0-3 272 KB libavahi-client3:i386 0.8-5ubuntu5 147 KB libavahi-common-data:i386 0.8-5ubuntu5 119 KB libavahi-common3:i386 0.8-5ubuntu5 120 KB libbrotli1:i386 1.0.9-2build6 812 KB libbsd0:i386 0.11.5-1 142 KB libcairo-gobject2:i386 1.16.0-5ubuntu2 96 KB libcairo2:i386 1.16.0-5ubuntu2 1.6 MB libcapi20-3:i386 1:3.27-3 108 KB libcdparanoia0:i386 3.10.2+debian-14build2 147 KB libcolord2:i386 1.4.6-1 694 KB libcups2:i386 2.4.1op1-1ubuntu4.1 858 KB libdatrie1:i386 0.2.13-2 68 KB libdecor-0-0:i386 0.1.0-3build1 53 KB libdecor-0-plugin-1-cairo:i386 0.1.0-3build1 66 KB libdeflate0:i386 1.10-2 144 KB libdrm-amdgpu1:i386 2.4.113-2~ubuntu0.22.04.1 89 KB libdrm2:i386 2.4.113-2~ubuntu0.22.04.1 142 KB libdw1:i386 0.186-1build1 777 KB libedit2:i386 3.1-20210910-1build1 269 KB libelf1:i386 0.186-1build1 197 KB libepoxy0:i386 1.5.10-1 1.3 MB libexif12:i386 0.6.24-1build1 352 KB libexpat1:i386 2.4.7-1ubuntu0.2 433 KB libfcitx-config4 1:4.2.9.8-5 136 KB libfcitx-core0 1:4.2.9.8-5 180 KB libfcitx-gclient1 1:4.2.9.8-5 95 KB libfcitx-qt5-1 1.2.7-1.2build1 307 KB libfcitx-qt5-data 1.2.7-1.2build1 61 KB libfcitx-utils0 1:4.2.9.8-5 125 KB libffi8:i386 3.4.2-4 66 KB libflac8:i386 1.3.3-2ubuntu0.1 288 KB libflashrom1 1.2-5build1 890 KB libfontconfig1:i386 2.13.1-4.2ubuntu5 361 KB libfreetype6:i386 2.11.1+dfsg-1ubuntu0.1 910 KB libfribidi0:i386 1.0.8-2ubuntu3.1 138 KB libftdi1-2 1.5-5build3 83 KB libgbm1:i386 22.2.5-0ubuntu0.1~22.04.1 151 KB libgd3:i386 2.3.0-2ubuntu2 468 KB libgdbm-compat4:i386 1.23-1 50 KB libgdbm6:i386 1.23-1 114 KB libgdk-pixbuf-2.0-0:i386 2.42.8+dfsg-1ubuntu0.2 531 KB libgdk-pixbuf-xlib-2.0-0:i386 2.40.2-2build4 105 KB libgdk-pixbuf2.0-0:i386 2.40.2-2build4 23 KB libgettextpo0 0.21-4ubuntu4 413 KB libglapi-mesa:i386 22.2.5-0ubuntu0.1~22.04.1 243 KB libglib2.0-0:i386 2.72.4-0ubuntu1 4.8 MB libglu1-mesa:i386 9.0.2-1 534 KB libglvnd0:i386 1.4.0-1 516 KB libgnutls30:i386 3.7.3-4ubuntu1.1 2.6 MB libgphoto2-port12:i386 2.5.27-1build2 319 KB libgraphite2-3:i386 1.3.14-1build2 199 KB libgsm1:i386 1.0.19-1 94 KB libgssapi3-heimdal:i386 7.7.0+dfsg-3ubuntu1 354 KB libgssrpc4 1.19.2-2ubuntu0.1 237 KB libgstreamer-plugins-base1.0-0:i386 1.20.1-1 3.0 MB libgstreamer1.0-0:i386 1.20.3-0ubuntu1 3.5 MB libgtk-3-0:i386 3.24.33-1ubuntu2 11.8 MB libharfbuzz0b:i386 2.7.4-1ubuntu3.1 1.1 MB libhcrypto4-heimdal:i386 7.7.0+dfsg-3ubuntu1 313 KB libheimbase1-heimdal:i386 7.7.0+dfsg-3ubuntu1 119 KB libheimntlm0-heimdal:i386 7.7.0+dfsg-3ubuntu1 87 KB libhogweed6:i386 3.7.3-1build2 349 KB libhx509-5-heimdal:i386 7.7.0+dfsg-3ubuntu1 388 KB libicu70:i386 70.1-2 35.5 MB libieee1284-3:i386 0.2.11-14build2 80 KB libjack0:i386 1:0.125.0-3build2 371 KB libjbig0:i386 2.1-3.1ubuntu0.22.04.1 79 KB libjpeg-turbo8:i386 2.1.2-0ubuntu1 621 KB libjpeg8:i386 8c-2ubuntu10 9 K","date":"2023-03-01","objectID":"/posts/ubuntu%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7nala/:3:0","tags":["ubuntu"],"title":"Ubuntu包管理工具nala","uri":"/posts/ubuntu%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7nala/"},{"categories":["golang"],"content":"123","date":"2023-03-01","objectID":"/posts/golang%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8Etag/","tags":["golang"],"title":"Golang构建基于tag(Gopher Guides NO.1构建标签)","uri":"/posts/golang%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8Etag/"},{"categories":["golang"],"content":" Build Tag Syntax Build Tag Sample Boolean Statement Space-separated elements // +build pro enterprise pro OR enterprise Comma-separated elements // +build pro,enterprise pro AND enterprise Exclamation point elements // +build !pro NOT pro 下面简单说说如何构建免费版、专业版和企业版的不同功能集的程序 ","date":"2023-03-01","objectID":"/posts/golang%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8Etag/:0:0","tags":["golang"],"title":"Golang构建基于tag(Gopher Guides NO.1构建标签)","uri":"/posts/golang%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8Etag/"},{"categories":["golang"],"content":"Space-separated elements 文件名：main.go package main import \"fmt\" var features = []string{ \"Free Feature #1\", \"Free Feature #2\", } func main() { for _, f := range features { fmt.Println(\"\u003e\", f) } } pro.go //go:build pro // +build pro package main func init() { features = append(features, \"Pro Feature #1\", \"Pro Feature #2\", ) } enterprise.go //go:build pro || enterprise // +build pro enterprise package main func init() { features = append(features, \"Enterprise Feature #1\", \"Enterprise Feature #2\", ) } 输出： ## \"pro enterprise\" tag都构建 chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ go build -tags \"pro enterprise\" chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ ./a \u003e Free Feature #1 \u003e Free Feature #2 \u003e Enterprise Feature #1 \u003e Enterprise Feature #2 \u003e Pro Feature #1 \u003e Pro Feature #2 ## 只构建enterprise的tag（注意这个） chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ go build -tags enterprise chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ ./a \u003e Free Feature #1 \u003e Free Feature #2 \u003e Enterprise Feature #1 \u003e Enterprise Feature #2 ## 构建带有tag的pro chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ go build -tags pro chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ ./a \u003e Free Feature #1 \u003e Free Feature #2 \u003e Enterprise Feature #1 \u003e Enterprise Feature #2 \u003e Pro Feature #1 \u003e Pro Feature #2 ","date":"2023-03-01","objectID":"/posts/golang%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8Etag/:1:0","tags":["golang"],"title":"Golang构建基于tag(Gopher Guides NO.1构建标签)","uri":"/posts/golang%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8Etag/"},{"categories":["golang"],"content":"Comma-separated elements 更改enterprise.go //go:build pro \u0026\u0026 enterprise // +build pro,enterprise package main func init() { features = append(features, \"Enterprise Feature #1\", \"Enterprise Feature #2\", ) } 输出： chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ go build -tags \"pro enterprise\" chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ ./a \u003e Free Feature #1 \u003e Free Feature #2 \u003e Enterprise Feature #1 \u003e Enterprise Feature #2 \u003e Pro Feature #1 \u003e Pro Feature #2 chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ go build -tags enterprise chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ ./a \u003e Free Feature #1 \u003e Free Feature #2 ## 注意这个pro tag,这个pro tag没有动过 chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ go build -tags pro chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ ./a \u003e Free Feature #1 \u003e Free Feature #2 \u003e Pro Feature #1 \u003e Pro Feature #2 ","date":"2023-03-01","objectID":"/posts/golang%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8Etag/:2:0","tags":["golang"],"title":"Golang构建基于tag(Gopher Guides NO.1构建标签)","uri":"/posts/golang%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8Etag/"},{"categories":["golang"],"content":"Exclamation point elements 这次更改pro.go //go:build !pro // +build !pro package main func init() { features = append(features, \"Pro Feature #1\", \"Pro Feature #2\", ) } 输出： chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ go build -tags \"pro enterprise\" chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ ./a \u003e Free Feature #1 \u003e Free Feature #2 \u003e Enterprise Feature #1 \u003e Enterprise Feature #2 ## 构建的时候不带有pro tag,就可以输出pro代码的相关信息 chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ go build -tags enterprise chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ ./a \u003e Free Feature #1 \u003e Free Feature #2 \u003e Pro Feature #1 \u003e Pro Feature #2 chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ go build -tags pro chunk@chunk-ThinkPad-X1-Carbon-5th:/tmp/go$ ./a \u003e Free Feature #1 \u003e Free Feature #2 ","date":"2023-03-01","objectID":"/posts/golang%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8Etag/:3:0","tags":["golang"],"title":"Golang构建基于tag(Gopher Guides NO.1构建标签)","uri":"/posts/golang%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8Etag/"},{"categories":["golang"],"content":"参考： customizing-go-binaries-with-build-tags ","date":"2023-03-01","objectID":"/posts/golang%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8Etag/:4:0","tags":["golang"],"title":"Golang构建基于tag(Gopher Guides NO.1构建标签)","uri":"/posts/golang%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8Etag/"},{"categories":null,"content":"需求 默认ack给我们每个work节点分配的容器组最大额度64,如图： 本想着尝试更改这个容器组数量 ","date":"2023-02-22","objectID":"/posts/%E9%98%BF%E9%87%8C%E4%BA%91ack%E5%AE%B9%E5%99%A8pod%E6%80%BB%E9%A2%9D%E5%BA%A6%E4%BF%AE%E6%94%B9/:1:0","tags":null,"title":"阿里云ack容器pod总额度修改","uri":"/posts/%E9%98%BF%E9%87%8C%E4%BA%91ack%E5%AE%B9%E5%99%A8pod%E6%80%BB%E9%A2%9D%E5%BA%A6%E4%BF%AE%E6%94%B9/"},{"categories":null,"content":"如何修改 通过root用户登陆ack工作节点，可以通过修改节点的/etc/systemd/system/kubelet.service.d/10-kubeadm.conf中的max pod来调整。 但请注意，创建集群的时候已经定义了每个节点支持的Pod数量（64个），这个时候也一并定义了节点的PodCIDR的子网掩码大小，这部分是无法调整的。 因此，虽然可以调整节点支持调度的pod数量，但每个节点可以给pod分配的IP是有限制的，无法修改。 意思就是说：注意可以分配的IP是固定修改不了的，但是可以修改每个节点所支持的容器组数量，所以一般不建议修改max pod数量。 # 阿里云ack 10-kubeadm.conf [Service] EnvironmentFile=-/etc/kubernetes/kubelet-customized-args.conf Environment=\"KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf\" Environment=\"KUBELET_SYSTEM_PODS_ARGS=--max-pods 64 --pod-manifest-path=/etc/kubernetes/manifests\" Environment=\"KUBELET_NETWORK_ARGS=--network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin --v=3\" Environment=\"KUBELET_DNS_ARGS=--enable-controller-attach-detach=true --cluster-dns=192.168.0.10 --pod-infra-container-image=registry-vpc.cn-shenzhen.aliyuncs.com/acs/pause:3.2 --enable-load-reader --cluster-domain=cluster.local --cloud-provider=external --hostname-override=cn-shenzhen.172.19.201.112 --provider-id=cn-shenzhen.i-wz91n56f8y4lx2jyf5yo\" Environment=\"KUBELET_AUTHZ_ARGS=--authorization-mode=Webhook --authentication-token-webhook=true --anonymous-auth=false --client-ca-file=/etc/kubernetes/pki/ca.crt\" Environment=\"KUBELET_CGROUP_ARGS=--cgroup-driver=systemd\" Environment=\"KUBELET_CERTIFICATE_ARGS=--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256 --tls-cert-file=/var/lib/kubelet/pki/kubelet.crt --tls-private-key-file=/var/lib/kubelet/pki/kubelet.key --rotate-certificates=true --cert-dir=/var/lib/kubelet/pki\" ExecStart= ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_SYSTEM_PODS_ARGS $KUBELET_NETWORK_ARGS $KUBELET_DNS_ARGS $KUBELET_AUTHZ_ARGS $KUBELET_CGROUP_ARGS $KUBELET_CERTIFICATE_ARGS $KUBELET_EXTRA_ARGS $KUBELET_CUSTOMIZED_ARGS # 原生K8S 10-kubeadm.conf # Note: This dropin only works with kubeadm and kubelet v1.11+ [Service] Environment=\"KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf\" Environment=\"KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml\" # This is a file that \"kubeadm init\" and \"kubeadm join\" generate at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file. EnvironmentFile=-/etc/default/kubelet Environment=\"KUBELET_EXTRA_ARGS=--node-ip=192.168.5.12 --hostname-override=node1 \" ExecStart= ExecStart=/usr/local/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS KUBELET_SYSTEM_PODS_ARGS=–max-pods 64 –pod-manifest-path=/etc/kubernetes/manifests 这行已经定义了，最大的pod数量 ","date":"2023-02-22","objectID":"/posts/%E9%98%BF%E9%87%8C%E4%BA%91ack%E5%AE%B9%E5%99%A8pod%E6%80%BB%E9%A2%9D%E5%BA%A6%E4%BF%AE%E6%94%B9/:2:0","tags":null,"title":"阿里云ack容器pod总额度修改","uri":"/posts/%E9%98%BF%E9%87%8C%E4%BA%91ack%E5%AE%B9%E5%99%A8pod%E6%80%BB%E9%A2%9D%E5%BA%A6%E4%BF%AE%E6%94%B9/"},{"categories":null,"content":"建议 不推荐更改容器组的数量，建议直接水平扩容计算工作节点！ ","date":"2023-02-22","objectID":"/posts/%E9%98%BF%E9%87%8C%E4%BA%91ack%E5%AE%B9%E5%99%A8pod%E6%80%BB%E9%A2%9D%E5%BA%A6%E4%BF%AE%E6%94%B9/:3:0","tags":null,"title":"阿里云ack容器pod总额度修改","uri":"/posts/%E9%98%BF%E9%87%8C%E4%BA%91ack%E5%AE%B9%E5%99%A8pod%E6%80%BB%E9%A2%9D%E5%BA%A6%E4%BF%AE%E6%94%B9/"},{"categories":null,"content":"指标 Apdex-应用性能用户满意度指标。Apdex指数 ＝（1 × 满意样本 ＋ 0.5 × 容忍样本）÷ 样本总数 这样，采样结果被量化为一个0到1之间的数值即“Apdex指数”，0代表没有满意用户，1则代表所有用户都满意。 graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ","date":"2023-02-22","objectID":"/posts/pinpoint%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E4%BB%8B%E7%BB%8D/:1:0","tags":null,"title":"Pinpoint性能指标介绍","uri":"/posts/pinpoint%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"第一款是星巴克的深度佛罗娜，喝了有焦味。 我的第二款咖啡豆牌子 牌子 TO. 耶加雪菲，浅度烘培，处理方法：日晒 国际咖啡评鉴师总评分 85.75 TO精品咖啡豆 埃塞俄比亚切尔巴耶加雪菲日晒200g 原产地手冲单品 口感不错，有香气。 ","date":"2023-02-19","objectID":"/posts/my-second/:0:0","tags":null,"title":"咖啡","uri":"/posts/my-second/"},{"categories":null,"content":"大家好，我是一个devops运维工程师！也是一位SRE工程师！ ","date":"2023-02-19","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Introduction This is bold text, and this is emphasized text. Visit the Hugo website! ","date":"2023-02-18","objectID":"/posts/my-first-post/:1:0","tags":null,"title":"My First Post","uri":"/posts/my-first-post/"}]